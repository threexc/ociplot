#!/usr/bin/python3

from PyQt5 import QtWidgets, QtCore, QtGui
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from pathlib import Path
import sys  # We need sys so that we can pass argv to QApplication
import os
import time
import yaml
import numpy as np
from random import randint
import walksignal.dataset as ds
import walksignal.equations as eq
import walksignal.plottools as pt

class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)

        self.setWindowTitle("walksignal 0.3.0")
        self.loaded_data = None
        if os.path.isfile("lastcfg.yaml"):
            with open("lastcfg.yaml", 'r') as stream:
                self.loaded_data = yaml.safe_load(stream)
        if self.loaded_data:
            self.datafile = self.loaded_data['datafile']
            self.reference = self.loaded_data['reference']
            if "tower_lat" in self.loaded_data and "tower_lon" in self.loaded_data:
                self.tower_lat = float(self.loaded_data['tower_lat'])
                self.tower_lon = float(self.loaded_data['tower_lon'])
        else:
            self.datafile = None
            self.reference = None
        self.config_data = None
        self.dataset = None
        self.absorption = 0.5
        self.density = 0.5
        self.x_range = None
        self.y_range = None

        self.pl_points = np.arange(0.5, 2500, 0.5)
        self.pl_freq = 50
        self.pl_alpha = 1
        self.pl_beta = 1
        self.pl_gamma = 1
        self.pl_sigma = 1
        self.pl_exp = 1
        self.pl_ref_dist = 1
        self.pl_ref_freq = 1000000000
        self.pl_fs_y = None
        self.pl_tx_power = 43
        self.pl_tx_gain = 3
        self.pl_rx_gain = 3
        self.pl_bs_height = 1
        self.pl_ue_height = 1
        self.pl_correction_factor = 1
        self.pl_large_city = True
        self.pl_path_gain = False

        self.cell = None
        self.cell_pl = None
        self.cell_distances = None
        self.tower = None
        self.tower_lat = None
        self.tower_lon = None
        self.cbar = None
        self.map_canvas = pt.MplCanvas(self, width=5, height=4, dpi=100)
        self.map_toolbar = NavigationToolbar(self.map_canvas, self)

        self.x = list(range(100))  # 100 time points
        self.y = [randint(0,100) for _ in range(100)]  # 100 data points
        self.rwm_offset = 0.0
        self.rwm_gain_factor = 1.0

        self.setupUI()
    
    def closeEvent(self, event):
        self.setConfig()
        self.saveConfig()

    def setupUI(self):
        self.setupPlotWidgets()
        self.setupLines()
        self.setupFileControls()
        self.setupRWMControls()
        self.setupCellControls()
        self.setupPathLossControls()
        self.setupFileMenu()
        self.setupMenuBar()
        self.setupPlotTabs()
        self.setupControlTabs()
        self.setupControlsSidebar()
        self.setupDataSidebar()

        self.main_layout = QtWidgets.QHBoxLayout()
        self.main_layout.addWidget(self.dataSidebarWidget, 1)
        self.main_layout.addWidget(self.plot_tabs, 3)
        self.main_layout.addWidget(self.plotSidebarWidget, 1)
        self.model_widget = QtWidgets.QWidget()
        self.model_widget.setLayout(self.main_layout)
        self.setCentralWidget(self.model_widget)
        if self.datafile:
            self.loadDataSet()
            self.set_data_text.setText(self.loaded_data['datafile'][0])
            self.set_reference_text.setText(self.loaded_data['reference'])

    def setupPlotWidgets(self):
        self.pl_red_pen = pg.mkPen(color=(255, 0, 0))
        self.pl_green_pen = pg.mkPen(color=(64, 192, 64))
        self.pl_blue_pen = pg.mkPen(color=(0, 0, 255))
        self.pl_green_pen = pg.mkPen(color=(64,192,64))
        self.pl_black_pen = pg.mkPen(color=(0, 0, 0))
        self.pl_orange_pen = pg.mkPen(color=(255, 145, 0))
        self.pl_oh_u_pen = pg.mkPen(color=(0, 255, 0))
        self.pl_oh_s_pen = pg.mkPen(color=(192,64,192))
        self.pl_oh_r_pen = pg.mkPen(color=(64, 64, 144))

        self.model_widget = pg.PlotWidget()
        self.model_widget.setBackground('w')
        self.model_widget.showGrid(x=True, y=True, alpha=0.5)
        self.model_widget.setYRange(-200, 20)

        self.pl_widget = pg.PlotWidget()
        self.pl_widget.addLegend()
        self.pl_widget.setBackground('w')
        self.pl_widget.showGrid(x=True, y=True, alpha=0.5)
        self.pl_widget.setYRange(-150, 150)

    def setupLines(self):
        self.data_line = self.model_widget.plot(self.x, self.y, pen=self.pl_red_pen)
        self.tower_data_line = pg.ScatterPlotItem(pen=pg.mkPen(width=5, color='b'), symbol='o', size=1)
        self.model_widget.addItem(self.tower_data_line)
        self.styles = {'color':'b', 'font-size':'18px'}
        self.model_widget.setLabel('left', "Power (dBm)", **self.styles)
        self.model_widget.setLabel('bottom', "Distance (m)", **self.styles)

        self.pl_abg_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_blue_pen, name="ABG Model")
        self.pl_ci_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_green_pen, name="CI Model")
        self.pl_fs_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_black_pen, name="Free Space Model")
        self.pl_oh_u_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_oh_u_pen, name="Okumura-Hata Urban")
        self.pl_oh_s_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_oh_s_pen, name="Okumura-Hata Suburban")
        self.pl_oh_r_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_oh_r_pen, name="Okumura-Hata Rural")
        self.pl_measured_line = self.pl_widget.plot(self.x, self.y, pen=None, symbol="o", symbolPen=self.pl_red_pen, symbolSize=3, symbolBrush=(255, 0, 0, 255), name="Measured")

        self.styles = {'color':'b', 'font-size':'18px'}
        self.pl_widget.setLabel('left', "Path Loss (dB)", **self.styles)
        self.pl_widget.setLabel('bottom', "Distance (m)", **self.styles)

    def setupFileControls(self):
        self.file_control_box = QtWidgets.QVBoxLayout()
        self.load_box = QtWidgets.QVBoxLayout()
        self.set_data_box = QtWidgets.QVBoxLayout()
        self.set_reference_box = QtWidgets.QVBoxLayout()

        self.file_controls_title = QtWidgets.QLabel('File Selection', self)
        self.file_controls_title.setFont(QtGui.QFont('Arial', 14))
        self.load_button = QtWidgets.QPushButton('Load', self)
        self.load_button.clicked.connect(self.setDataSource)
        self.set_data_button = QtWidgets.QPushButton('Set Dataset', self)
        self.set_data_button.clicked.connect(self.showFileDialog)
        self.set_data_text = QtWidgets.QLineEdit('None', self)
        self.set_data_text.setReadOnly(True)
        self.set_reference_button = QtWidgets.QPushButton('Set Reference', self)
        self.set_reference_button.clicked.connect(self.showReferenceDialog)
        self.set_reference_text = QtWidgets.QLineEdit('None', self)
        self.set_reference_text.setReadOnly(True)

        self.load_box.addWidget(self.load_button)
        self.set_data_box.addWidget(self.set_data_button)
        self.set_data_box.addWidget(self.set_data_text)
        self.set_reference_box.addWidget(self.set_reference_button)
        self.set_reference_box.addWidget(self.set_reference_text)
        self.file_control_box.addWidget(self.file_controls_title)
        self.file_control_box.addLayout(self.load_box)
        self.file_control_box.addLayout(self.set_data_box)
        self.file_control_box.addLayout(self.set_reference_box)

    def setupRWMControls(self):
        self.model_box = QtWidgets.QVBoxLayout()
        self.density_box = QtWidgets.QHBoxLayout()
        self.absorption_box = QtWidgets.QHBoxLayout()
        self.offset_box = QtWidgets.QHBoxLayout()
        self.gain_factor_box = QtWidgets.QHBoxLayout()

        self.setupRWMSliders()

        self.radio_2d = QtWidgets.QRadioButton("2D Model", self)
        self.radio_3d = QtWidgets.QRadioButton("3D Model", self)
        self.radio_3d.setChecked(True)
        self.radio_2d.toggled.connect(self.updateRWMPlot)
        self.radio_3d.toggled.connect(self.updateRWMPlot)

        self.density_box.addWidget(self.density_slider_label)
        self.density_box.addWidget(self.density_slider)
        self.density_box.addWidget(self.density_value_label)
        self.absorption_box.addWidget(self.absorption_slider_label)
        self.absorption_box.addWidget(self.absorption_slider)
        self.absorption_box.addWidget(self.absorption_value_label)
        self.offset_box.addWidget(self.offset_slider_label)
        self.offset_box.addWidget(self.offset_slider)
        self.offset_box.addWidget(self.offset_value_label)
        self.gain_factor_box.addWidget(self.gain_factor_slider_label)
        self.gain_factor_box.addWidget(self.gain_factor_slider)
        self.gain_factor_box.addWidget(self.gain_factor_value_label)

        self.model_box.addWidget(self.radio_2d)
        self.model_box.addWidget(self.radio_3d)
        self.model_box.addLayout(self.density_box)
        self.model_box.addLayout(self.absorption_box)
        self.model_box.addLayout(self.offset_box)
        self.model_box.addLayout(self.gain_factor_box)
        self.model_box.setAlignment(QtCore.Qt.AlignTop)

    def setupPathLossControls(self):
        self.pl_box = QtWidgets.QVBoxLayout()
        self.pl_checkbox_title_box = QtWidgets.QHBoxLayout()
        self.pl_checkbox_box = QtWidgets.QVBoxLayout()
        self.pl_pl_title_box = QtWidgets.QHBoxLayout()
        self.pl_th_title_box = QtWidgets.QHBoxLayout()
        self.pl_checkbox_subbox_1 = QtWidgets.QHBoxLayout()
        self.pl_oh_title_box = QtWidgets.QHBoxLayout()
        self.pl_checkbox_subbox_2 = QtWidgets.QHBoxLayout()
        self.pl_checkbox_subbox_3 = QtWidgets.QHBoxLayout()
        self.pl_freq_box = QtWidgets.QHBoxLayout()
        self.pl_alpha_box = QtWidgets.QHBoxLayout()
        self.pl_beta_box = QtWidgets.QHBoxLayout()
        self.pl_gamma_box = QtWidgets.QHBoxLayout()
        self.pl_sigma_box = QtWidgets.QHBoxLayout()
        self.pl_exp_box = QtWidgets.QHBoxLayout()
        self.pl_tx_power_box = QtWidgets.QHBoxLayout()
        self.pl_tx_gain_box = QtWidgets.QHBoxLayout()
        self.pl_rx_gain_box = QtWidgets.QHBoxLayout()
        self.pl_ref_dist_box = QtWidgets.QHBoxLayout()
        self.pl_ref_freq_box = QtWidgets.QHBoxLayout()
        self.pl_bs_height_box = QtWidgets.QHBoxLayout()
        self.pl_ue_height_box = QtWidgets.QHBoxLayout()

        self.setupPLCheckBoxes()
        self.setupPLSliders()
        self.setupPLTextBoxes()
        self.setupPLTitles()
        self.setupLatLonBoxes()

        self.pl_box.addLayout(self.pl_checkbox_title_box)
        self.pl_box.addLayout(self.pl_th_title_box)
        self.pl_checkbox_box.addLayout(self.pl_checkbox_subbox_1)
        self.pl_checkbox_box.addLayout(self.pl_oh_title_box)
        self.pl_checkbox_box.addLayout(self.pl_checkbox_subbox_2)
        self.pl_checkbox_box.addLayout(self.pl_checkbox_subbox_3)
        self.pl_box.addLayout(self.pl_checkbox_box)
        self.pl_box.addLayout(self.pl_freq_box)
        self.pl_box.addLayout(self.pl_ref_dist_box)
        self.pl_box.addLayout(self.pl_ref_freq_box)
        self.pl_box.addLayout(self.pl_alpha_box)
        self.pl_box.addLayout(self.pl_beta_box)
        self.pl_box.addLayout(self.pl_gamma_box)
        self.pl_box.addLayout(self.pl_sigma_box)
        self.pl_box.addLayout(self.pl_exp_box)
        self.pl_box.addLayout(self.pl_tx_gain_box)
        self.pl_box.addLayout(self.pl_rx_gain_box)
        self.pl_box.addLayout(self.pl_tx_power_box)
        self.pl_box.addLayout(self.pl_bs_height_box)
        self.pl_box.addLayout(self.pl_ue_height_box)
        self.pl_box.setAlignment(QtCore.Qt.AlignTop)

    def setupCellControls(self):
        self.tower_box = QtWidgets.QVBoxLayout()
        self.cellid_box = QtWidgets.QHBoxLayout()
        self.mcc_box = QtWidgets.QHBoxLayout()
        self.mnc_box = QtWidgets.QHBoxLayout()
        self.lac_box = QtWidgets.QHBoxLayout()
        self.latbox = QtWidgets.QHBoxLayout()
        self.lonbox = QtWidgets.QHBoxLayout()

        self.tower_combo_title = QtWidgets.QLabel('Cell Selection', self)
        self.tower_combo_title.setFont(QtGui.QFont('Arial', 14))

        self.cellid_label = QtWidgets.QLabel('Cell IDs', self)
        self.mcc_label = QtWidgets.QLabel('MCCs', self)
        self.mnc_label = QtWidgets.QLabel('MNCs', self)
        self.lac_label = QtWidgets.QLabel('LACs', self)

        self.cellid_count = QtWidgets.QLabel('', self)
        self.mcc_count = QtWidgets.QLabel('', self)
        self.mnc_count = QtWidgets.QLabel('', self)
        self.lac_count = QtWidgets.QLabel('', self)

        self.cellid_combo = QtWidgets.QComboBox(self)
        self.mcc_combo = QtWidgets.QComboBox(self)
        self.mnc_combo = QtWidgets.QComboBox(self)
        self.lac_combo = QtWidgets.QComboBox(self)

        self.cellid_combo.activated.connect(self.setCell)

        self.cellid_box.addWidget(self.cellid_label)
        self.cellid_box.addWidget(self.cellid_count)
        self.cellid_box.addWidget(self.cellid_combo)
        self.mcc_box.addWidget(self.mcc_label)
        self.mcc_box.addWidget(self.mcc_count)
        self.mcc_box.addWidget(self.mcc_combo)
        self.mnc_box.addWidget(self.mnc_label)
        self.mnc_box.addWidget(self.mnc_count)
        self.mnc_box.addWidget(self.mnc_combo)
        self.lac_box.addWidget(self.lac_label)
        self.lac_box.addWidget(self.lac_count)
        self.lac_box.addWidget(self.lac_combo)
        self.cell_load_button = QtWidgets.QPushButton('Load Cell Data', self)
        self.cell_load_button.clicked.connect(self.loadCell)
        self.cell_load_button.setEnabled(False)
        
        self.tower_box.addWidget(self.tower_combo_title)
        self.tower_box.addLayout(self.cellid_box)
        self.tower_box.addLayout(self.mcc_box)
        self.tower_box.addLayout(self.mnc_box)
        self.tower_box.addLayout(self.lac_box)
        self.tower_box.addWidget(self.cell_load_button)
        self.tower_box.addLayout(self.latbox)
        self.tower_box.addLayout(self.lonbox)
        self.tower_box.setAlignment(QtCore.Qt.AlignTop)

        print("Set up tower controls")

    def setupFileMenu(self):
        self.selectFile = QtWidgets.QAction(QtGui.QIcon('open.png'), 'Select File', self)
        self.selectFile.setShortcut('Ctrl+O')
        self.selectFile.setStatusTip('Select New File')
        self.selectFile.triggered.connect(self.showFileDialog)
        self.selectFile.triggered.connect(self.setDataSource)

        self.referenceFile = QtWidgets.QAction(QtGui.QIcon('open.png'), 'Select Reference File', self)
        self.referenceFile.setShortcut('Ctrl+R')
        self.referenceFile.setStatusTip('Select Reference File')
        self.referenceFile.triggered.connect(self.showReferenceDialog)
        print("Set up file menu buttons")

    def setupMenuBar(self):
        self.menubar = self.menuBar()
        self.fileMenu = self.menubar.addMenu('&File')
        self.fileMenu.addAction(self.selectFile)
        self.fileMenu.addAction(self.referenceFile)
        print("Set up menu bar")

    def setupPlotTabs(self):
        self.plot_tabs = QtWidgets.QTabWidget()
        self.map_box = QtWidgets.QVBoxLayout()
        self.map_box.addWidget(self.map_toolbar)
        self.map_box.addWidget(self.map_canvas)
        self.plot_tab1 = QtWidgets.QWidget()
        self.plot_tab1.setLayout(self.map_box)
        self.plot_tab2 = self.pl_widget
        self.plot_tab3 = self.model_widget
        self.plot_tabs.resize(300, 200)
        self.plot_tabs.addTab(self.plot_tab1, "Cell Map")
        self.plot_tabs.addTab(self.plot_tab2, "Path Loss")
        self.plot_tabs.addTab(self.plot_tab3, "RWM")

    def setupControlTabs(self):
        self.control_tabs = QtWidgets.QTabWidget()
        self.rwm_control_tab = QtWidgets.QWidget()
        self.pl_control_tab = QtWidgets.QWidget()
        self.control_tabs.addTab(self.pl_control_tab, "Path Loss")
        self.control_tabs.addTab(self.rwm_control_tab, "RWM")

    def setupControlsSidebar(self):
        self.plotSidebar = QtWidgets.QVBoxLayout()
        self.rwm_control_tab.setLayout(self.model_box)
        self.pl_control_tab.setLayout(self.pl_box)

        self.controls_title = QtWidgets.QLabel('Controls', self)
        self.controls_title.setFont(QtGui.QFont('Arial', 14))

        self.plotSidebar.addWidget(self.controls_title)
        self.plotSidebar.addWidget(self.control_tabs)
        self.plotSidebar.setAlignment(QtCore.Qt.AlignTop)
        self.plotSidebarWidget = QtWidgets.QWidget()
        self.plotSidebarWidget.setLayout(self.plotSidebar)
        print("Set up sidebar")

    def setupDataSidebar(self):
        self.dataSidebar = QtWidgets.QVBoxLayout()
        self.dataSidebar.addLayout(self.file_control_box)
        self.dataSidebar.addLayout(self.tower_box)
        self.dataSidebar.addWidget(self.cell_load_button)
        self.dataSidebar.setAlignment(QtCore.Qt.AlignTop)
        self.dataSidebarWidget = QtWidgets.QWidget()
        self.dataSidebarWidget.setLayout(self.dataSidebar)
        print("Set up sidebar")

    def setupPLCheckBoxes(self):
        self.pl_fs_checkbox = QtWidgets.QCheckBox("FS")
        self.pl_fs_checkbox.setChecked(True)
        self.pl_fs_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_1.addWidget(self.pl_fs_checkbox)

        self.pl_abg_checkbox = QtWidgets.QCheckBox("ABG")
        self.pl_abg_checkbox.setChecked(True)
        self.pl_abg_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_1.addWidget(self.pl_abg_checkbox)

        self.pl_ci_checkbox = QtWidgets.QCheckBox("CI")
        self.pl_ci_checkbox.setChecked(False)
        self.pl_ci_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_1.addWidget(self.pl_ci_checkbox)

        self.pl_oh_u_checkbox = QtWidgets.QCheckBox("Urban")
        self.pl_oh_u_checkbox.setChecked(False)
        self.pl_oh_u_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_2.addWidget(self.pl_oh_u_checkbox)

        self.pl_oh_s_checkbox = QtWidgets.QCheckBox("Suburban")
        self.pl_oh_s_checkbox.setChecked(False)
        self.pl_oh_s_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_2.addWidget(self.pl_oh_s_checkbox)

        self.pl_oh_r_checkbox = QtWidgets.QCheckBox("Rural")
        self.pl_oh_r_checkbox.setChecked(False)
        self.pl_oh_r_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_2.addWidget(self.pl_oh_r_checkbox)

        self.pl_large_city_checkbox = QtWidgets.QCheckBox("Large City")
        self.pl_large_city_checkbox.setChecked(True)
        self.pl_large_city_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_3.addWidget(self.pl_large_city_checkbox)

        self.pl_path_gain_checkbox = QtWidgets.QCheckBox("Plot as Gain")
        self.pl_path_gain_checkbox.setChecked(False)
        self.pl_path_gain_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_subbox_3.addWidget(self.pl_path_gain_checkbox)

    def setupPLSliders(self):
        self.pl_alpha_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_alpha_slider.setRange(0, 100)
        self.pl_alpha_slider.setValue(10)
        self.pl_alpha_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_alpha_slider_label = QtWidgets.QLabel('Alpha', self)
        self.pl_alpha_value_label = QtWidgets.QLabel('1', self)
        self.pl_alpha_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_alpha_box.addWidget(self.pl_alpha_slider_label)
        self.pl_alpha_box.addWidget(self.pl_alpha_slider)
        self.pl_alpha_box.addWidget(self.pl_alpha_value_label)

        self.pl_beta_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_beta_slider.setRange(-1000, 1000)
        self.pl_beta_slider.setValue(0)
        self.pl_beta_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_beta_slider_label = QtWidgets.QLabel('Beta', self)
        self.pl_beta_value_label = QtWidgets.QLabel('0 dB', self)
        self.pl_beta_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_beta_box.addWidget(self.pl_beta_slider_label)
        self.pl_beta_box.addWidget(self.pl_beta_slider)
        self.pl_beta_box.addWidget(self.pl_beta_value_label)

        self.pl_gamma_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_gamma_slider.setRange(0, 100)
        self.pl_gamma_slider.setValue(10)
        self.pl_gamma_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_gamma_slider_label = QtWidgets.QLabel('Gamma', self)
        self.pl_gamma_value_label = QtWidgets.QLabel('1', self)
        self.pl_gamma_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_gamma_box.addWidget(self.pl_gamma_slider_label)
        self.pl_gamma_box.addWidget(self.pl_gamma_slider)
        self.pl_gamma_box.addWidget(self.pl_gamma_value_label)

        self.pl_sigma_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_sigma_slider.setRange(0, 100)
        self.pl_sigma_slider.setValue(10)
        self.pl_sigma_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_sigma_slider_label = QtWidgets.QLabel('Sigma', self)
        self.pl_sigma_value_label = QtWidgets.QLabel('1 dB', self)
        self.pl_sigma_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_sigma_box.addWidget(self.pl_sigma_slider_label)
        self.pl_sigma_box.addWidget(self.pl_sigma_slider)
        self.pl_sigma_box.addWidget(self.pl_sigma_value_label)

        self.pl_exp_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_exp_slider.setRange(0, 100)
        self.pl_exp_slider.setValue(10)
        self.pl_exp_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_exp_slider_label = QtWidgets.QLabel('PL Exp', self)
        self.pl_exp_value_label = QtWidgets.QLabel('1', self)
        self.pl_exp_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_exp_box.addWidget(self.pl_exp_slider_label)
        self.pl_exp_box.addWidget(self.pl_exp_slider)
        self.pl_exp_box.addWidget(self.pl_exp_value_label)

        self.pl_tx_power_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_tx_power_slider.setRange(0, 1000)
        self.pl_tx_power_slider.setValue(430)
        self.pl_tx_power_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_tx_power_slider_label = QtWidgets.QLabel('TX Power', self)
        self.pl_tx_power_value_label = QtWidgets.QLabel('43 dBm', self)
        self.pl_tx_power_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_tx_power_box.addWidget(self.pl_tx_power_slider_label)
        self.pl_tx_power_box.addWidget(self.pl_tx_power_slider)
        self.pl_tx_power_box.addWidget(self.pl_tx_power_value_label)

        self.pl_tx_gain_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_tx_gain_slider.setRange(0, 1000)
        self.pl_tx_gain_slider.setValue(0)
        self.pl_tx_gain_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_tx_gain_slider_label = QtWidgets.QLabel('TX Gain', self)
        self.pl_tx_gain_value_label = QtWidgets.QLabel('3 dB', self)
        self.pl_tx_gain_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_tx_gain_box.addWidget(self.pl_tx_gain_slider_label)
        self.pl_tx_gain_box.addWidget(self.pl_tx_gain_slider)
        self.pl_tx_gain_box.addWidget(self.pl_tx_gain_value_label)

        self.pl_rx_gain_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_rx_gain_slider.setRange(0, 200)
        self.pl_rx_gain_slider.setValue(0)
        self.pl_rx_gain_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_rx_gain_slider_label = QtWidgets.QLabel('RX Gain', self)
        self.pl_rx_gain_value_label = QtWidgets.QLabel('3 dB', self)
        self.pl_rx_gain_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_rx_gain_box.addWidget(self.pl_rx_gain_slider_label)
        self.pl_rx_gain_box.addWidget(self.pl_rx_gain_slider)
        self.pl_rx_gain_box.addWidget(self.pl_rx_gain_value_label)

        self.pl_bs_height_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_bs_height_slider.setRange(0, 2500)
        self.pl_bs_height_slider.setValue(10)
        self.pl_bs_height_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_bs_height_slider_label = QtWidgets.QLabel('BS Height', self)
        self.pl_bs_height_value_label = QtWidgets.QLabel('1 m', self)
        self.pl_bs_height_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_bs_height_box.addWidget(self.pl_bs_height_slider_label)
        self.pl_bs_height_box.addWidget(self.pl_bs_height_slider)
        self.pl_bs_height_box.addWidget(self.pl_bs_height_value_label)

        self.pl_ue_height_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_ue_height_slider.setRange(0, 100)
        self.pl_ue_height_slider.setValue(10)
        self.pl_ue_height_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_ue_height_slider_label = QtWidgets.QLabel('UE Height', self)
        self.pl_ue_height_value_label = QtWidgets.QLabel('1 m', self)
        self.pl_ue_height_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_ue_height_box.addWidget(self.pl_ue_height_slider_label)
        self.pl_ue_height_box.addWidget(self.pl_ue_height_slider)
        self.pl_ue_height_box.addWidget(self.pl_ue_height_value_label)

    def setupPLTextBoxes(self):
        self.pl_freq_textbox = QtWidgets.QLineEdit(self)
        self.pl_freq_textbox.setText("50")
        self.pl_freq_textbox_label = QtWidgets.QLabel('Frequency', self)
        self.pl_freq_value_label = QtWidgets.QLabel('MHz', self)
        self.pl_freq_textbox.textEdited.connect(self.textboxUpdate)
        self.pl_freq_box.addWidget(self.pl_freq_textbox_label)
        self.pl_freq_box.addWidget(self.pl_freq_textbox)
        self.pl_freq_box.addWidget(self.pl_freq_value_label)

        self.pl_ref_dist_textbox = QtWidgets.QLineEdit(self)
        self.pl_ref_dist_textbox.setText("1")
        self.pl_ref_dist_textbox_label = QtWidgets.QLabel('Ref Dist', self)
        self.pl_ref_dist_value_label = QtWidgets.QLabel('m', self)
        self.pl_ref_dist_textbox.textEdited.connect(self.textboxUpdate)
        self.pl_ref_dist_box.addWidget(self.pl_ref_dist_textbox_label)
        self.pl_ref_dist_box.addWidget(self.pl_ref_dist_textbox)
        self.pl_ref_dist_box.addWidget(self.pl_ref_dist_value_label)

        self.pl_ref_freq_textbox = QtWidgets.QLineEdit(self)
        self.pl_ref_freq_textbox.setText("1000")
        self.pl_ref_freq_textbox_label = QtWidgets.QLabel('Ref Freq', self)
        self.pl_ref_freq_value_label = QtWidgets.QLabel('MHz', self)
        self.pl_ref_freq_textbox.textEdited.connect(self.textboxUpdate)
        self.pl_ref_freq_box.addWidget(self.pl_ref_freq_textbox_label)
        self.pl_ref_freq_box.addWidget(self.pl_ref_freq_textbox)
        self.pl_ref_freq_box.addWidget(self.pl_ref_freq_value_label)

    def setupPLTitles(self):
        self.pl_checkbox_title = QtWidgets.QLabel("Models")
        self.pl_checkbox_title.setFont(QtGui.QFont("Arial", 12))
        self.pl_checkbox_title_box.addWidget(self.pl_checkbox_title)

        self.pl_th_title = QtWidgets.QLabel("Large-Scale")
        self.pl_th_title.setFont(QtGui.QFont("Arial", 10))
        self.pl_th_title_box.addWidget(self.pl_th_title)

        self.pl_oh_title = QtWidgets.QLabel("Okumura-Hata")
        self.pl_oh_title.setFont(QtGui.QFont("Arial", 10))
        self.pl_oh_title_box.addWidget(self.pl_oh_title)

    def setupLatLonBoxes(self):
        self.lat_edit = QtWidgets.QLineEdit(self)
        self.lat_edit.textEdited.connect(self.setTowerLocation)
        if self.tower_lat:
            self.lat_edit.setText(str(self.tower_lat))
        self.latbox_label = QtWidgets.QLabel("Tower Lat", self)
        self.latbox.addWidget(self.latbox_label)
        self.latbox.addWidget(self.lat_edit)
        self.lon_edit = QtWidgets.QLineEdit(self)
        self.lon_edit.textEdited.connect(self.setTowerLocation)
        if self.tower_lon:
            self.lon_edit.setText(str(self.tower_lon))
        self.lonbox_label = QtWidgets.QLabel("Tower Lon", self)
        self.lonbox.addWidget(self.lonbox_label)
        self.lonbox.addWidget(self.lon_edit)

    def setupRWMSliders(self):
        self.density_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.density_slider.setRange(1, 100)
        self.density_slider.setValue(50)
        self.density_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.density_slider_label = QtWidgets.QLabel('Density', self)
        self.density_value_label = QtWidgets.QLabel('0.5', self)

        self.absorption_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.absorption_slider.setRange(1, 100)
        self.absorption_slider.setValue(50)
        self.absorption_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.absorption_slider_label = QtWidgets.QLabel('Absorption', self)
        self.absorption_value_label = QtWidgets.QLabel('0.5', self)

        self.offset_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.offset_slider.setRange(-150, 150)
        self.offset_slider.setValue(0)
        self.offset_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.offset_slider_label = QtWidgets.QLabel('Offset', self)
        self.offset_value_label = QtWidgets.QLabel('0 dB', self)

        self.gain_factor_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.gain_factor_slider.setRange(1, 10)
        self.gain_factor_slider.setValue(1)
        self.gain_factor_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.gain_factor_slider_label = QtWidgets.QLabel('Gain Factor', self)
        self.gain_factor_value_label = QtWidgets.QLabel(u"1 Wm\u00B2", self)

        self.density_slider.valueChanged[int].connect(self.rwmSliderUpdate)
        self.absorption_slider.valueChanged[int].connect(self.rwmSliderUpdate)
        self.offset_slider.valueChanged[int].connect(self.rwmSliderUpdate)
        self.gain_factor_slider.valueChanged[int].connect(self.rwmSliderUpdate)

    def showFileDialog(self):
        home_dir = str(Path.home)
        fname = QtWidgets.QFileDialog.getOpenFileNames(self, 'Open file', home_dir)

        if fname[0]:
            print("Selected datafile {0}".format(fname[0]))
            self.datafile = fname[0]
            self.set_data_text.setText(str(self.datafile))

    def showReferenceDialog(self):
        home_dir = str(Path.home)
        fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', home_dir)

        if fname[0]:
            print("Selected reference file {0}".format(fname[0]))
            self.reference = fname[0]
            self.set_reference_text.setText(str(self.reference))

    def setDataSource(self):
        if self.reference and self.datafile:
            self.loadDataSet()
        elif self.reference:
            print("datafile not selected")
        elif self.datafile:
            print("reference file not selected")
        else:
            print("No files selected. Select a datafile and a reference file")

    def loadDataSet(self):
        print("Loading data...")
        self.start_time = time.time()
        self.dataset = ds.DataSet(self.datafile, self.reference)
        self.duration = time.time() - self.start_time
        print("Done loading data in {:.2f} seconds".format(self.duration))
        print("Setting up tower selectors...")
        self.cellid_combo.clear()
        self.mcc_combo.clear()
        self.mnc_combo.clear()
        self.lac_combo.clear()
        self.cellid_count.setText("(" + str(len(self.dataset.cellid_u)) + ")")
        self.mcc_count.setText("(" + str(len(self.dataset.mcc_u)) + ")")
        self.mnc_count.setText("(" + str(len(self.dataset.mnc_u)) + ")")
        self.lac_count.setText("(" + str(len(self.dataset.lac_u)) + ")")

        for mcc in self.dataset.mcc_u:
            self.mcc_combo.addItem(str(mcc))
        for mnc in self.dataset.mnc_u:
            self.mnc_combo.addItem(str(mnc))
        for lac in self.dataset.lac_u:
            self.lac_combo.addItem(str(lac))
        for cellid in self.dataset.cellid_u:
            self.cellid_combo.addItem(str(cellid))

        print("Generating default plot...")

        self.loadCell()

        print("Done.")

    def setCell(self):
        self.cell = self.dataset.get_cell(self.cellid_combo.currentText())
        point_count = len(self.cell.signal_power)
        self.cell_load_button.setText("Load Cell Data ({0} points)".format(point_count))
        self.cell_load_button.setEnabled(True)

    def setTowerLocation(self):
        if self.lat_edit.text() and self.lon_edit.text():
            self.tower_lat = float(self.lat_edit.text())
            self.tower_lon = float(self.lon_edit.text())

            self.cell_distances = self.cell.get_distances(self.tower_lat, self.tower_lon)
            self.cell_pl = self.cell.get_path_loss(self.pl_tx_power)

    def textboxUpdate(self):
        self.pl_freq = float(self.pl_freq_textbox.text())
        self.pl_ref_dist = float(self.pl_ref_dist_textbox.text())
        self.pl_ref_freq = float(self.pl_ref_freq_textbox.text())
        if self.dataset:
            self.plUpdatePlot()
    
    def checkboxUpdate(self):
        if self.pl_large_city_checkbox.isChecked():
            self.pl_large_city = True
        else:
            self.pl_large_city = False

        if self.pl_path_gain_checkbox.isChecked():
            self.pl_path_gain = True
            self.pl_widget.setLabel('left', "Path Gain (dB)", **self.styles)
        else:
            self.pl_path_gain = False
            self.pl_widget.setLabel('left', "Path Loss (dB)", **self.styles)
        self.plUpdatePlot()

    def rwmSliderUpdate(self):
        self.density = self.density_slider.value() / 100.0
        self.absorption = self.absorption_slider.value() / 100.0
        self.rwm_offset = self.offset_slider.value()
        self.rwm_gain_factor = self.gain_factor_slider.value()
        self.density_value_label.setText(str(self.density))
        self.absorption_value_label.setText(str(self.absorption))
        self.offset_value_label.setText(str(self.rwm_offset) + " dB")
        self.gain_factor_value_label.setText(str(self.rwm_gain_factor) + u" Wm\u00B2")
        if self.dataset:
            self.updateRWMPlot()

    def plSliderUpdate(self):
        self.pl_alpha = self.pl_alpha_slider.value() / 10.0
        self.pl_beta = self.pl_beta_slider.value() / 10.0
        self.pl_gamma = self.pl_gamma_slider.value() / 10.0
        self.pl_sigma = self.pl_sigma_slider.value() / 10.0
        self.pl_exp = self.pl_exp_slider.value() / 10.0
        self.pl_tx_power = self.pl_tx_power_slider.value() / 10.0
        self.pl_tx_gain = self.pl_tx_gain_slider.value() / 10.0
        self.pl_rx_gain = self.pl_rx_gain_slider.value() / 10.0
        self.pl_bs_height = self.pl_bs_height_slider.value() / 10.0
        self.pl_ue_height = self.pl_ue_height_slider.value() / 10.0
        self.pl_alpha_value_label.setText(str(self.pl_alpha))
        self.pl_beta_value_label.setText(str(self.pl_beta) + " dB")
        self.pl_gamma_value_label.setText(str(self.pl_gamma))
        self.pl_sigma_value_label.setText(str(self.pl_sigma) + " dB")
        self.pl_exp_value_label.setText(str(self.pl_exp))
        self.pl_tx_power_value_label.setText(str(self.pl_tx_power) + " dBm")
        self.pl_tx_gain_value_label.setText(str(self.pl_tx_gain) + " dB")
        self.pl_rx_gain_value_label.setText(str(self.pl_rx_gain) + " dB")
        self.pl_bs_height_value_label.setText(str(self.pl_bs_height) + " m")
        self.pl_ue_height_value_label.setText(str(self.pl_ue_height) + " m")
        if self.dataset:
            self.plUpdatePlot()

    def loadCell(self):
        print("Loading cell data...")
        self.setCell()
        self.setTowerLocation()
        self.updateCellPlot()
        self.updateRWMPlot()
        self.plUpdatePlot()
        self.setConfig()

    def setConfig(self):
        self.config_data = {
                'datafile': self.datafile,
                'reference': self.reference,
        }
        if self.tower_lat and self.tower_lon:
            self.config_data['tower_lat'] = self.tower_lat
            self.config_data['tower_lon'] = self.tower_lon

    def saveConfig(self):
        with open("lastcfg.yaml", "w") as yamlfile:
            data = yaml.dump(self.config_data, yamlfile)

    def updateCellPlot(self):
        points = self.cell.data_points
        lon_series = np.array([point.lon for point in points], dtype=float)
        lat_series = np.array([point.lat for point in points], dtype=float)

        if self.cbar:
            self.cbar.remove()
        self.map_canvas.axes.cla()
        divider = make_axes_locatable(self.map_canvas.axes)
        cax = divider.append_axes("right", size="5%", pad=0.1)
        self.map_canvas.axes.imshow(self.dataset.plot_map, zorder=0, extent = self.dataset.map_bbox[0], aspect="equal")
        powerscatter = self.map_canvas.axes.scatter(lon_series, lat_series, zorder=1, alpha=1.0, s=20, c=self.cell.signal_power, cmap=self.dataset.cm)

        if (self.tower_lon is None) or (self.tower_lat is None):
            print("Can't draw tower, bad lat/lon")
        else:
            self.map_canvas.axes.scatter(float(self.tower_lon), float(self.tower_lat), zorder=1, alpha=1.0, s=20, color="blue")

        self.map_canvas.axes.set_xlim(self.dataset.map_bbox[0][0], self.dataset.map_bbox[0][1])
        self.map_canvas.axes.set_ylim(self.dataset.map_bbox[0][2], self.dataset.map_bbox[0][3])
        self.map_canvas.axes.set_xlabel("Longitude")
        self.map_canvas.axes.set_ylabel("Latitude")
        self.map_canvas.axes.set_title("Signal Power vs Position")
        self.cbar = self.map_canvas.fig.colorbar(powerscatter, cax=cax)
        self.cbar.ax.set_ylabel("Signal Power (dBm)", rotation=270, labelpad=10)

        self.map_canvas.draw()

    def plUpdatePlot(self):
        self.updateMeasuredLine()
        self.plUpdateXScale()
        self.plUpdateYScale()
        self.updateCILine()
        self.updateABGLine()
        self.updateFSLine()
        self.updateOHULine()
        self.updateOHSLine()
        self.updateOHRLine()

    def plUpdateXScale(self):
        self.pl_widget.setXRange(0, max(self.cell_distances) + 50)

    def plUpdateYScale(self):
        if self.pl_path_gain:
            y_min = max(self.cell_pl) * -1 - 20
            y_max = min(self.cell_pl) * -1 + 20
        else:
            y_min = min(self.cell_pl) - 20
            y_max = max(self.cell_pl) + 20
        self.pl_widget.setYRange(y_min, y_max)

    def updateMeasuredLine(self):
        self.cell_distances = self.cell.get_distances(self.tower_lat, self.tower_lon)
        self.cell_pl = self.cell.get_path_loss(self.pl_tx_power)
        if self.pl_path_gain:
            measured_inverted = [element * -1 for element in self.cell_pl]
            self.pl_measured_line.setData(self.cell_distances, measured_inverted)
        else:
            self.pl_measured_line.setData(self.cell_distances, self.cell_pl)

    def updateFSLine(self):
        if self.pl_fs_checkbox.isChecked():
            self.fs_y = eq.v_pl_fs(self.pl_points, self.pl_freq) - self.pl_tx_gain - self.pl_rx_gain
            if self.pl_path_gain:
                fs_inverted = [element * -1 for element in self.fs_y]
                self.pl_fs_line.setData(self.pl_points, fs_inverted)
            else:
                self.pl_fs_line.setData(self.pl_points, self.fs_y)
        else:
            self.pl_fs_line.clear()

    def updateCILine(self):
        if self.pl_ci_checkbox.isChecked():
            self.ci_y = eq.v_pl_ci(self.pl_points, self.pl_freq, self.pl_sigma, self.pl_exp, self.pl_ref_dist) - self.pl_tx_gain - self.pl_rx_gain
            if self.pl_path_gain:
                ci_inverted = [element * -1 for element in self.ci_y]
                self.pl_ci_line.setData(self.pl_points, ci_inverted)
            else:
                self.pl_ci_line.setData(self.pl_points, self.ci_y)
        else:
            self.pl_ci_line.clear()

    def updateABGLine(self):
        if self.pl_abg_checkbox.isChecked():
            self.abg_y = eq.v_pl_abg(self.pl_points, self.pl_freq, self.pl_alpha, self.pl_beta, self.pl_gamma, self.pl_sigma, self.pl_ref_dist, self.pl_ref_freq) - self.pl_tx_gain - self.pl_rx_gain
            if self.pl_path_gain:
                abg_inverted = [element * -1 for element in self.abg_y]
                self.pl_abg_line.setData(self.pl_points, abg_inverted)
            else:
                self.pl_abg_line.setData(self.pl_points, self.abg_y)
        else:
            self.pl_abg_line.clear()

    def updateOHULine(self):
        if self.pl_oh_u_checkbox.isChecked():
            self.pl_oh_u_y = eq.v_pl_oh_urban(self.pl_points, self.pl_freq, self.pl_bs_height, self.pl_ue_height, self.pl_large_city) - self.pl_tx_gain - self.pl_rx_gain
            if self.pl_path_gain:
                oh_u_inverted = [element * -1 for element in self.pl_oh_u_y]
                self.pl_oh_u_line.setData(self.pl_points, oh_u_inverted)
            else:
                self.pl_oh_u_line.setData(self.pl_points, self.pl_oh_u_y)
        else:
            self.pl_oh_u_line.clear()

    def updateOHSLine(self):
        if self.pl_oh_s_checkbox.isChecked():
            self.pl_oh_s_y = eq.v_pl_oh_suburban(self.pl_points, self.pl_freq, self.pl_bs_height, self.pl_ue_height) - self.pl_tx_gain - self.pl_rx_gain
            if self.pl_path_gain:
                oh_s_inverted = [element * -1 for element in self.pl_oh_s_y]
                self.pl_oh_s_line.setData(self.pl_points, oh_s_inverted)
            else:
                self.pl_oh_s_line.setData(self.pl_points, self.pl_oh_s_y)
        else:
            self.pl_oh_s_line.clear()

    def updateOHRLine(self):
        if self.pl_oh_r_checkbox.isChecked():
            self.pl_oh_r_y = eq.v_pl_oh_rural(self.pl_points, self.pl_freq, self.pl_bs_height, self.pl_ue_height) - self.pl_tx_gain - self.pl_rx_gain
            if self.pl_path_gain:
                oh_r_inverted = [element * -1 for element in self.pl_oh_r_y]
                self.pl_oh_r_line.setData(self.pl_points, oh_r_inverted)
            else:
                self.pl_oh_r_line.setData(self.pl_points, self.pl_oh_r_y)
        else:
            self.pl_oh_r_line.clear()

    def updateRWMPlot(self):
        self.x_range = self.dataset.plotrange
        if self.radio_2d.isChecked():
            self.y_range = self.rwm_offset + eq.gplt_rwm_fpd2d(self.density, self.absorption, self.x_range, self.rwm_gain_factor)
        else:
            self.y_range = self.rwm_offset + eq.gplt_rwm_fpd3d(self.density, self.absorption, self.x_range, self.rwm_gain_factor)
        self.data_line.clear()
        self.data_line.setData(self.x_range, self.y_range)
        if self.tower and self.tower.distances:
            self.tower_data_line.clear()
            self.tower_data_line.setData(self.tower.distances, self.tower.signal_power, symbol='o')

app = QtWidgets.QApplication(sys.argv)
w = MainWindow()
w.show()
sys.exit(app.exec_())
