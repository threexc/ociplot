#!/usr/bin/python3

import sys  # We need sys so that we can pass argv to QApplication
import os
import time
import yaml
import numpy as np
import pyqtgraph as pg
from random import randint
from PIL import Image
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib_scalebar.scalebar import ScaleBar
from pathlib import Path
from PyQt5 import QtWidgets, QtCore, QtGui
import matplotlib.pyplot as plt
import walksignal.dataset as ds
import walksignal.models as md
import walksignal.canvases as canvases
import walksignal.utils as utils
import walksignal.config as cfg
import walksignal.gui.tablemodel as tm
import walksignal.gui.customwidgets as pw

class WSWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        super(WSWindow, self).__init__(*args, **kwargs)

        self.setWindowTitle("walksignal 0.11.0")
        self.config = cfg.Config("lastcfg.yaml")
        self.engine = md.ModelEngine(self.config)

        self.signal_dataset = None

        self.cell = None
        self.cell_pl = None
        self.cell_distances = None
        self.tower = None
        self.tower_annotation = None
        self.cbar = None

        self.x_range = np.arange(0.5, 2500, 2)
        self.y = [randint(0,100) for _ in self.x_range]  # 100 data points

        self.setup()
    
    def closeEvent(self, event):
        self.config.save()

    def setup(self):
        self.createWidgets()
        self.createTextWidgets()
        self.createCheckboxes()
        self.createButtons()
        self.createLabels()
        self.createCombos()
        self.createMapCanvas()
        self.createPens()
        self.createLines()
        self.createScrollAreas()
        self.createTableViews()
        self.createLayouts()
        self.buildUI()

        if self.config.signal_data_files:
            print(f"Setting signal data...")
            self.setSignalData()
            self.load()

    def createMapCanvas(self):
        print(f"Setting up map canvas...")
        self.signal_map_canvas = canvases.MplCanvas(self, width=5, height=4, dpi=100)
        self.signal_map_toolbar = NavigationToolbar(self.signal_map_canvas, self)
        self.signal_cm = plt.cm.get_cmap('gist_heat')

    def createLines(self):
        print(f"Setting up lines...")
        self.pl_abg_line = self.pl_widget.plot(self.x_range, self.y, pen=self.pl_blue_pen, name="ABG Model")
        self.pl_ci_line = self.pl_widget.plot(self.x_range, self.y, pen=self.pl_green_pen, name="CI Model")
        self.pl_fs_line = self.pl_widget.plot(self.x_range, self.y, pen=self.pl_solid_pen, name="Free Space Model")
        self.pl_tworay_line = self.pl_widget.plot(self.x_range, self.y, pen=self.pl_dot_pen, name="TwoRay Model")
        self.pl_oh_u_line = self.pl_widget.plot(self.x_range, self.y, pen=self.pl_dash_pen, name="Okumura-Hata Urban")
        self.pl_oh_s_line = self.pl_widget.plot(self.x_range, self.y, pen=self.pl_dashdot_pen, name="Okumura-Hata Suburban")
        self.pl_oh_r_line = self.pl_widget.plot(self.x_range, self.y, pen=self.pl_dashdotdot_pen, name="Okumura-Hata Rural")
        self.pl_measured_line = self.pl_widget.plot(self.x_range, self.y, pen=None, symbol="o", symbolPen=self.pl_red_pen, symbolSize=4, symbolBrush=(255, 0, 0, 255), name="Measured")

    def createPens(self):
        self.pl_red_pen = pg.mkPen(color=(255, 0, 0), width=1)
        self.pl_green_pen = pg.mkPen(color=(64, 192, 64), width=3)
        self.pl_blue_pen = pg.mkPen(color=(0, 0, 255), width=3)
        self.pl_solid_pen = pg.mkPen(color=(0, 0, 0), width=3, style=QtCore.Qt.SolidLine)
        self.pl_dot_pen = pg.mkPen(color=(255, 144, 0), width=3, style=QtCore.Qt.DotLine)
        self.pl_dash_pen = pg.mkPen(color=(128, 64, 64), width=3, style=QtCore.Qt.DashLine)
        self.pl_dashdot_pen = pg.mkPen(color=(192,64,192), width=3, style=QtCore.Qt.DashDotLine)
        self.pl_dashdotdot_pen = pg.mkPen(color=(64, 64, 144), width=3, style=QtCore.Qt.DashDotDotLine)

    def createTextWidgets(self):
        if self.config:
            self.pl_freq_parameter = pw.TextWidget("f", "MHz", self.config.freq, self.updateTextboxes)
        else:
            self.pl_freq_parameter = pw.TextWidget("f", "MHz", 50, self.updateTextboxes)

        self.pl_ref_dist_parameter = pw.TextWidget("d<sub>0</sub>", "m", 1, self.updateTextboxes)

        self.pl_tx_power_parameter = pw.SliderTextWidget("P<sub>TX</sub>", "dBm", self.config.tx_power, 0, 1000, 10, self.updateSliders, self.updateTextboxes)
        self.pl_tx_gain_parameter = pw.SliderTextWidget("G<sub>TX</sub>", "dB", self.config.tx_gain, 0, 1000, 10, self.updateSliders, self.updateTextboxes)
        self.pl_rx_gain_parameter = pw.SliderTextWidget("G<sub>RX</sub>", "dB", self.config.rx_gain, 0, 1000, 10, self.updateSliders, self.updateTextboxes) 
        self.pl_alpha_parameter = pw.SliderTextWidget("\u03B1", "", self.config.alpha, 0, 100, 10, self.updateSliders, self.updateTextboxes)
        self.pl_beta_parameter = pw.SliderTextWidget("\u03B2", "dB", self.config.beta, -1000, 1000, 10, self.updateSliders, self.updateTextboxes)
        self.pl_gamma_parameter = pw.SliderTextWidget("\u03B3", "", self.config.gamma, 0, 100, 10, self.updateSliders, self.updateTextboxes)
        self.pl_sigma_parameter = pw.SliderTextWidget("\u03C3", "dB", self.config.sigma, 0, 100, 10, self.updateSliders, self.updateTextboxes)
        self.pl_exp_parameter = pw.SliderTextWidget("\u03BD (CI)", "", self.config.pl_exp, 0, 100, 10, self.updateSliders, self.updateTextboxes)
        self.pl_bs_height_parameter = pw.SliderTextWidget("h<sub>TX</sub>", "m", self.config.bs_height, 0, 2500, 10, self.updateSliders, self.updateTextboxes)
        self.pl_ue_height_parameter = pw.SliderTextWidget("h<sub>RX</sub>", "m", self.config.ue_height, 0, 100, 10, self.updateSliders, self.updateTextboxes)
        self.pl_coherence_length_parameter = pw.SliderTextWidget("L<sub>coh</sub>", "m", self.config.coherence_length, 1, 20, 1, self.updateSliders, self.updateTextboxes)

        self.lat_edit = QtWidgets.QLineEdit(self)
        if self.config.tower_lat:
            self.lat_edit.setText(str(self.config.tower_lat))

        self.lon_edit = QtWidgets.QLineEdit(self)
        if self.config.tower_lon:
            self.lon_edit.setText(str(self.config.tower_lon))

        self.tower_label_edit = QtWidgets.QLineEdit(self)
        if self.config.tower_label:
            self.tower_label_edit.setText(str(self.config.tower_label))

    def createCheckboxes(self):
        self.pl_path_gain_checkbox = QtWidgets.QCheckBox("Plot as Gain")
        self.pl_path_gain_checkbox.setChecked(self.config.path_gain)
        self.pl_path_gain_checkbox.stateChanged.connect(self.updateCheckboxes)

        self.pl_large_city_checkbox = QtWidgets.QCheckBox("Large City")
        self.pl_large_city_checkbox.setChecked(self.config.large_city)
        self.pl_large_city_checkbox.stateChanged.connect(self.updateCheckboxes)

    def createLabels(self):
        self.pl_controls_title = QtWidgets.QLabel("Path Loss Controls")
        self.pl_controls_title.setFont(QtGui.QFont("Arial", 14))
        self.set_tower_title = QtWidgets.QLabel('Tower Location')
        self.set_tower_title.setFont(QtGui.QFont('Arial', 14))
        self.cell_selection_combo_title = QtWidgets.QLabel('Cell Selection')
        self.cell_selection_combo_title.setFont(QtGui.QFont('Arial', 14))
        self.cellid_label = QtWidgets.QLabel('Cell IDs')
        self.cellid_count = QtWidgets.QLabel('')
        self.mobile_country_codes_label = QtWidgets.QLabel('MCCs')
        self.mobile_country_codes_count = QtWidgets.QLabel('')
        self.mobile_network_codes_label = QtWidgets.QLabel('MNCs')
        self.mobile_network_codes_count = QtWidgets.QLabel('')
        self.local_area_codes_label = QtWidgets.QLabel('LACs')
        self.local_area_codes_count = QtWidgets.QLabel('')
        self.overall_summary_title = QtWidgets.QLabel("Overall Statistics")
        self.overall_cellstats_title = QtWidgets.QLabel("Statistics by Cell")
        self.overall_cellstats_title.setFont(QtGui.QFont("Arial", 16))
        self.latbox_label = QtWidgets.QLabel("Latitude")
        self.lonbox_label = QtWidgets.QLabel("Longitude")
        self.tower_label = QtWidgets.QLabel("Label")

    def createButtons(self):
        self.cell_load_button = QtWidgets.QPushButton('Load Cell Data')
        self.cell_load_button.clicked.connect(self.load)
        self.set_signal_data_button = QtWidgets.QPushButton('Select File(s)')
        self.set_signal_data_button.clicked.connect(self.showSignalFileDialog)
        self.set_tower_button = QtWidgets.QPushButton('Set Tower')
        self.set_tower_button.clicked.connect(self.setTowerLocation)

    def createCombos(self):
        self.cellid_combo = QtWidgets.QComboBox(self)
        self.mobile_country_codes_combo = QtWidgets.QComboBox(self)
        self.mobile_network_codes_combo = QtWidgets.QComboBox(self)
        self.local_area_codes_combo = QtWidgets.QComboBox(self)

    def createScrollAreas(self):
        self.summary_scroll_area = QtWidgets.QScrollArea()
        self.summary_scroll_area.setWidgetResizable(True)
        self.cellstats_scroll_area = QtWidgets.QScrollArea()
        self.cellstats_scroll_area.setWidgetResizable(True)

    def createTableViews(self):
        self.overall_summary_table = QtWidgets.QTableView()
        self.overall_summary_table.setSizePolicy(QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed))
        self.overall_summary_title.setFont(QtGui.QFont("Arial", 16))

        self.raw_data_table = QtWidgets.QTableView()

    def createWidgets(self):
        self.main_widget = QtWidgets.QWidget()
        self.summary_data_widget = QtWidgets.QWidget()
        self.cellstats_data_widget = QtWidgets.QWidget()
        self.signal_map_tab = QtWidgets.QWidget()
        self.raw_data_tab = QtWidgets.QWidget()
        self.pl_plot_tab = QtWidgets.QWidget()
        self.tabs = QtWidgets.QTabWidget()
        self.control_tabs = QtWidgets.QTabWidget()
        self.dataSidebarWidget = QtWidgets.QWidget()

        self.styles = {'color':'b', 'font-size':'18px'}
        self.pl_widget = pg.PlotWidget()
        self.pl_widget.setBackground('w')
        self.pl_widget.showGrid(x=True, y=True, alpha=0.8)
        self.pl_widget.setYRange(-150, 150)
        self.pl_widget.setLabel('left', "Path Loss (dB)", **self.styles)
        self.pl_widget.setLabel('bottom', "Distance (m)", **self.styles)
        self.pl_widget.getAxis('left').setTextPen('black')
        self.pl_widget.getAxis('bottom').setTextPen('black')
        self.pl_widget.getAxis('left').setStyle(tickFont=QtGui.QFont('Arial', 16))
        self.pl_widget.getAxis('bottom').setStyle(tickFont=QtGui.QFont('Arial', 16))

    def createLayouts(self):
        self.main_layout = QtWidgets.QHBoxLayout()
        self.file_control_box = QtWidgets.QVBoxLayout()
        self.file_load_box = QtWidgets.QHBoxLayout()
        self.pl_general_controls_box = QtWidgets.QVBoxLayout()
        self.cell_control_box = QtWidgets.QVBoxLayout()
        self.tower_loc_box = QtWidgets.QVBoxLayout()
        self.cell_selection_box = QtWidgets.QVBoxLayout()
        self.cellid_box = QtWidgets.QHBoxLayout()
        self.mobile_country_codes_box = QtWidgets.QHBoxLayout()
        self.mobile_network_codes_box = QtWidgets.QHBoxLayout()
        self.local_area_codes_box = QtWidgets.QHBoxLayout()
        self.latbox = QtWidgets.QHBoxLayout()
        self.lonbox = QtWidgets.QHBoxLayout()
        self.tower_label_box = QtWidgets.QHBoxLayout()
        self.set_tower_box = QtWidgets.QVBoxLayout()
        self.pl_oh_title_box = QtWidgets.QHBoxLayout()
        self.pl_exp_tworay_box = QtWidgets.QHBoxLayout()
        self.summary_data_box = QtWidgets.QVBoxLayout()
        self.cellstats_data_box = QtWidgets.QVBoxLayout()
        self.signal_map_box = QtWidgets.QVBoxLayout()
        self.raw_data_box = QtWidgets.QHBoxLayout()
        self.pl_plot_box = QtWidgets.QHBoxLayout()
        self.dataSidebar = QtWidgets.QVBoxLayout()

    def buildUI(self):
        self.pl_general_controls_box.addWidget(self.pl_controls_title)
        self.pl_general_controls_box.addWidget(self.pl_tx_gain_parameter)
        self.pl_general_controls_box.addWidget(self.pl_rx_gain_parameter)
        self.pl_general_controls_box.addWidget(self.pl_bs_height_parameter)
        self.pl_general_controls_box.addWidget(self.pl_ue_height_parameter)
        self.pl_general_controls_box.addWidget(self.pl_exp_parameter)
        self.pl_general_controls_box.addWidget(self.pl_alpha_parameter)
        self.pl_general_controls_box.addWidget(self.pl_beta_parameter)
        self.pl_general_controls_box.addWidget(self.pl_gamma_parameter)
        self.pl_general_controls_box.addWidget(self.pl_sigma_parameter)
        self.pl_general_controls_box.addWidget(self.pl_large_city_checkbox)
        self.pl_general_controls_box.addWidget(self.pl_path_gain_checkbox)
        self.pl_general_controls_box.addWidget(self.pl_ref_dist_parameter)
        self.pl_general_controls_box.addWidget(self.pl_freq_parameter)
        self.pl_general_controls_box.addWidget(self.pl_tx_power_parameter)
        self.pl_general_controls_box.addWidget(self.pl_coherence_length_parameter)

        self.cellid_box.addWidget(self.cellid_label)
        self.cellid_box.addWidget(self.cellid_count)
        self.cellid_box.addWidget(self.cellid_combo)

        self.mobile_country_codes_box.addWidget(self.mobile_country_codes_label)
        self.mobile_country_codes_box.addWidget(self.mobile_country_codes_count)
        self.mobile_country_codes_box.addWidget(self.mobile_country_codes_combo)

        self.mobile_network_codes_box.addWidget(self.mobile_network_codes_label)
        self.mobile_network_codes_box.addWidget(self.mobile_network_codes_count)
        self.mobile_network_codes_box.addWidget(self.mobile_network_codes_combo)

        self.local_area_codes_box.addWidget(self.local_area_codes_label)
        self.local_area_codes_box.addWidget(self.local_area_codes_count)
        self.local_area_codes_box.addWidget(self.local_area_codes_combo)

        self.cell_selection_box.addWidget(self.cell_selection_combo_title)
        self.cell_selection_box.addLayout(self.mobile_country_codes_box)
        self.cell_selection_box.addLayout(self.mobile_network_codes_box)
        self.cell_selection_box.addLayout(self.local_area_codes_box)
        self.cell_selection_box.addLayout(self.cellid_box)
        self.set_tower_box.addWidget(self.cell_load_button)
        self.set_tower_box.addWidget(self.set_tower_title)
        self.set_tower_box.addLayout(self.latbox)
        self.set_tower_box.addLayout(self.lonbox)
        self.set_tower_box.addLayout(self.tower_label_box)
        self.set_tower_box.setAlignment(QtCore.Qt.AlignTop)
        self.cell_control_box.addLayout(self.cell_selection_box)
        self.cell_control_box.addLayout(self.set_tower_box)
        self.latbox.addWidget(self.latbox_label)
        self.latbox.addWidget(self.lat_edit)
        self.lonbox.addWidget(self.lonbox_label)
        self.lonbox.addWidget(self.lon_edit)
        self.tower_label_box.addWidget(self.tower_label)
        self.tower_label_box.addWidget(self.tower_label_edit)
        self.set_tower_box.addWidget(self.set_tower_button)

        self.file_load_box.addWidget(self.set_signal_data_button)
        self.file_control_box.addLayout(self.file_load_box)

        self.summary_data_box.addWidget(self.overall_summary_title)
        self.summary_data_box.addWidget(self.overall_summary_table)
        self.summary_data_widget.setLayout(self.summary_data_box)
        self.summary_scroll_area.setWidget(self.summary_data_widget)
        self.summary_data_tab = self.summary_scroll_area

        self.cellstats_data_box.addWidget(self.overall_cellstats_title)
        self.cellstats_data_widget.setLayout(self.cellstats_data_box)
        self.cellstats_scroll_area.setWidget(self.cellstats_data_widget)
        self.cellstats_data_tab = self.cellstats_scroll_area

        self.signal_map_box.addWidget(self.signal_map_toolbar)
        self.signal_map_box.addWidget(self.signal_map_canvas)
        self.signal_map_tab.setLayout(self.signal_map_box)

        self.raw_data_box.addWidget(self.raw_data_table)
        self.raw_data_tab.setLayout(self.raw_data_box)

        self.pl_plot_box.addWidget(self.pl_widget, 2)
        self.pl_plot_tab.setLayout(self.pl_plot_box)

        self.tabs.addTab(self.summary_data_tab, "Summary")
        self.tabs.addTab(self.cellstats_data_tab, "Cell Stats")
        self.tabs.addTab(self.signal_map_tab, "Signal Map")
        self.tabs.addTab(self.pl_plot_tab, "Path Loss")
        self.tabs.addTab(self.raw_data_tab, "Raw Data")

        self.dataSidebar.addLayout(self.file_control_box)
        self.dataSidebar.addLayout(self.cell_control_box)
        self.dataSidebar.addWidget(self.cell_load_button)
        self.dataSidebar.addLayout(self.pl_general_controls_box)
        self.dataSidebar.setAlignment(QtCore.Qt.AlignTop)
        self.dataSidebar.setSpacing(0)
        self.dataSidebarWidget.setLayout(self.dataSidebar)

        self.main_layout.addWidget(self.dataSidebarWidget, 1)
        self.main_layout.addWidget(self.tabs, 3)
        self.main_widget.setLayout(self.main_layout)
        self.setCentralWidget(self.main_widget)

    def showSignalFileDialog(self):
        home_dir = str(Path.home)
        fname = QtWidgets.QFileDialog.getOpenFileNames(self, 'Open file', home_dir)

        if fname[0]:
            self.config.signal_data_files = fname[0]

        self.setSignalData()

    def setSignalData(self):
        self.signal_dataset = ds.DataSuperset(self.config.signal_data_files)
        self.cellid_combo.clear()
        self.mobile_country_codes_combo.clear()
        self.mobile_network_codes_combo.clear()
        self.local_area_codes_combo.clear()
        self.cellid_count.setText("(" + str(len(self.signal_dataset.unique_cellids)) + ")")
        self.mobile_country_codes_count.setText("(" + str(len(self.signal_dataset.unique_mobile_country_codes)) + ")")
        self.mobile_network_codes_count.setText("(" + str(len(self.signal_dataset.unique_mobile_network_codes)) + ")")
        self.local_area_codes_count.setText("(" + str(len(self.signal_dataset.unique_local_area_codes)) + ")")

        for mobile_country_code in self.signal_dataset.unique_mobile_country_codes:
            self.mobile_country_codes_combo.addItem(str(mobile_country_code))
        for mobile_network_code in self.signal_dataset.unique_mobile_network_codes:
            self.mobile_network_codes_combo.addItem(str(mobile_network_code))
        for local_area_code in self.signal_dataset.unique_local_area_codes:
            self.local_area_codes_combo.addItem(str(local_area_code))
        for cellid in self.signal_dataset.unique_cellids:
            self.cellid_combo.addItem(str(cellid))

    def setScaleBar(self):
        print(f"Setting scale bar...")
        x1, x2, y1, y2 = self.signal_map_canvas.axes.axis()
        _y = (y1 + y2)/2
        p1, p2 = (int(x1), _y), (int(x1)+1, _y)
        meter_per_deg = utils.get_great_circle_distance(p1, p2)
        self.map_width, self.map_height = Image.open(self.signal_dataset.cellmap.map_path).size
        self.scalebar_dist = utils.get_distance(self.signal_dataset.map_bbox[0][2],
                 self.signal_dataset.map_bbox[0][0],
                 self.signal_dataset.map_bbox[0][2],
                 self.signal_dataset.map_bbox[0][1])
        self.pixel_width = self.scalebar_dist * 1000 / self.map_width
        self.scalebar = ScaleBar(meter_per_deg.meters, "m",
                length_fraction=0.2, location="lower right")
        self.signal_map_canvas.axes.add_artist(self.scalebar)

    def load(self):
        print("Loading cell data...")
        self.setCell()
        self.updateMap()
        self.updateRawTable()
        self.updateSummaryTable()
        self.updateCellStatsTable()
        self.setScaleBar()
        self.setTowerLocation()

    def setCell(self):
        print(f"Setting cell...")
        self.cell = self.signal_dataset.get_cell(int(self.cellid_combo.currentText()))
        point_count = len(self.cell.signal_power)
        self.cell_load_button.setText("Load Cell Data ({0} points)".format(point_count))

    def setTowerLocation(self):
        if self.lat_edit.text() and self.lon_edit.text():
            print(f"Setting tower location...")
            self.config.tower_lat = float(self.lat_edit.text())
            self.config.tower_lon = float(self.lon_edit.text())
            self.signal_map_canvas.axes.scatter(float(self.config.tower_lon),
                    float(self.config.tower_lat), zorder=1, alpha=1.0, s=48, color="blue")
            if self.tower_annotation:
                self.tower_annotation.remove()
            if self.tower_label_edit.text():
                self.config.tower_label = str(self.tower_label_edit.text())
                self.tower_annotation = self.signal_map_canvas.axes.annotate(self.tower_label_edit.text(),
                        (float(self.config.tower_lon),
                        float(self.config.tower_lat)), fontsize=20)
            self.signal_map_canvas.draw()

            self.cell_distances = self.cell.get_distances(self.config.tower_lat,
                    self.config.tower_lon, self.config.bs_height)
            self.cell_pl = self.cell.get_path_loss(self.config.tx_power,
                    self.config.tx_gain, self.config.rx_gain)
            
            if self.signal_dataset:
                self.updatePlot()
        else:
            print("Can't draw tower, bad lat/lon")

    def updateTextboxes(self):
        self.config.freq = float(self.pl_freq_parameter.text() or 0)
        self.config.ref_dist = float(self.pl_ref_dist_parameter.text() or 0)
        self.config.alpha = self.pl_alpha_parameter.value
        self.config.beta = self.pl_beta_parameter.value
        self.config.gamma = self.pl_gamma_parameter.value
        self.config.sigma = self.pl_sigma_parameter.value
        self.config.pl_exp = self.pl_exp_parameter.value
        self.config.tx_power = self.pl_tx_power_parameter.value
        self.config.coherence_length = self.pl_coherence_length_parameter.value
        self.config.tx_gain = self.pl_tx_gain_parameter.value
        self.config.rx_gain = self.pl_rx_gain_parameter.value
        self.config.bs_height = self.pl_bs_height_parameter.value
        self.config.ue_height = self.pl_ue_height_parameter.value
        if self.signal_dataset:
            self.updatePlot()
    
    def updateCheckboxes(self):
        if self.pl_large_city_checkbox.isChecked():
            self.config.large_city = True
        else:
            self.config.large_city = False

        if self.pl_path_gain_checkbox.isChecked():
            self.config.path_gain = True
            self.pl_widget.setLabel('left', "Path Gain (dB)", **self.styles)
        else:
            self.config.path_gain = False
            self.pl_widget.setLabel('left', "Path Loss (dB)", **self.styles)
        self.updatePlot()

    def updateSliders(self):
        self.config.alpha = self.pl_alpha_parameter.value
        self.config.beta = self.pl_beta_parameter.value
        self.config.gamma = self.pl_gamma_parameter.value
        self.config.sigma = self.pl_sigma_parameter.value
        self.config.pl_exp = self.pl_exp_parameter.value
        self.config.tx_power = self.pl_tx_power_parameter.value
        self.config.coherence_length = self.pl_coherence_length_parameter.value
        self.config.tx_gain = self.pl_tx_gain_parameter.value
        self.config.rx_gain = self.pl_rx_gain_parameter.value
        self.config.bs_height = self.pl_bs_height_parameter.value
        self.config.ue_height = self.pl_ue_height_parameter.value
        if self.signal_dataset:
            self.updatePlot()

    def updateRawTable(self):
        self.raw_table_model = tm.TableModel(self.signal_dataset.data)
        self.raw_data_table.setModel(self.raw_table_model)

    def updateSummaryTable(self):
        for i in reversed(range(self.summary_data_box.count())):
            self.summary_data_box.itemAt(i).widget().setParent(None)

        self.summary_table_model = tm.TableModel(self.signal_dataset.summary)
        self.overall_summary_table.setModel(self.summary_table_model)
        self.summary_data_box.addWidget(self.overall_summary_title)
        self.summary_data_box.addWidget(self.overall_summary_table)
        for index in range(len(self.signal_dataset.set_summaries)):
            set_title = QtWidgets.QLabel(str(self.signal_dataset.file_list[index].rsplit("/", 1)[1]))
            set_title.setFont(QtGui.QFont("Arial", 12))
            view = QtWidgets.QTableView()
            model = tm.TableModel(self.signal_dataset.set_summaries[index])
            view.setModel(model)
            view.setSizePolicy(QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed))
            self.summary_data_box.addWidget(set_title)
            self.summary_data_box.addWidget(view)

    def updateCellStatsTable(self):
        for i in reversed(range(self.cellstats_data_box.count())):
            self.cellstats_data_box.itemAt(i).widget().setParent(None)

        for index in range(len(self.signal_dataset.cellid_subset_summaries)):
            cellid_title = QtWidgets.QLabel(str(self.signal_dataset.unique_cellids[index]))
            cellid_title.setFont(QtGui.QFont("Arial", 12))
            view = QtWidgets.QTableView()
            model = tm.TableModel(self.signal_dataset.cellid_subset_summaries[index])
            view.setModel(model)
            view.setSizePolicy(QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed))
            self.cellstats_data_box.addWidget(cellid_title)
            self.cellstats_data_box.addWidget(view)

    def updateMap(self):
        points = self.cell.data_points
        lon_series = np.array([point.lon for point in points], dtype=float)
        lat_series = np.array([point.lat for point in points], dtype=float)

        if self.cbar:
            self.cbar.remove()
        self.signal_map_canvas.axes.cla()
        divider = make_axes_locatable(self.signal_map_canvas.axes)
        cax = divider.append_axes("right", size="5%", pad=0.1)
        self.signal_map_canvas.axes.imshow(self.signal_dataset.plot_map, zorder=0, extent = self.signal_dataset.map_bbox[0], aspect="equal")
        powerscatter = self.signal_map_canvas.axes.scatter(lon_series, lat_series, zorder=1, alpha=1.0, s=20, c=self.cell.signal_power, cmap=self.signal_cm)

        self.signal_map_canvas.axes.set_xlim(self.signal_dataset.map_bbox[0][0], self.signal_dataset.map_bbox[0][1])
        self.signal_map_canvas.axes.set_ylim(self.signal_dataset.map_bbox[0][2], self.signal_dataset.map_bbox[0][3])
        self.signal_map_canvas.axes.set_xlabel("Longitude", labelpad=10)
        self.signal_map_canvas.axes.set_ylabel("Latitude", labelpad=10)
        self.signal_map_canvas.axes.set_title("Signal Power vs Position", pad=10)
        self.signal_map_canvas.axes.title.set_fontsize(24)
        self.signal_map_canvas.axes.xaxis.label.set_fontsize(16)
        self.signal_map_canvas.axes.yaxis.label.set_fontsize(16)
        self.signal_map_canvas.axes.tick_params(axis='x', labelsize=14)
        self.signal_map_canvas.axes.tick_params(axis='y', labelsize=14)
        self.cbar = self.signal_map_canvas.fig.colorbar(powerscatter, cax=cax)
        self.cbar.ax.set_ylabel("Signal Power (dBm)", rotation=270, labelpad=15)
        self.cbar.ax.yaxis.label.set_fontsize(16)
        self.cbar.ax.tick_params(axis='y', labelsize=14)

        self.signal_map_canvas.draw()

    def updatePlot(self):
        self.updateMeasurements()
        self.updateLines()
        self.updatePlotTitle()
        self.updateLegend()

    def updatePlotTitle(self):
        if self.config.path_gain:
            self.pl_widget.setTitle(f"<p \
                    style=\"color:black;font-size:24px\">Path Gain for Cell \
                    {self.cell.cellid} vs Distance \
                    ({self.config.tower_lat},{self.config.tower_lon}), \
                    {self.config.freq} MHz, G<sub>TX</sub> \
                    = {self.config.tx_gain} dB, G<sub>RX</sub> = \
                    {self.config.rx_gain} dB</p>")
        else:
            self.pl_widget.setTitle(f"<p \
                    style=\"color:black;font-size:24px\">Path Loss for Cell \
                    {self.cell.cellid} vs Distance \
                    ({self.config.tower_lat},{self.config.tower_lon}), \
                    {self.config.freq} MHz, G<sub>TX</sub> \
                    = {self.config.tx_gain} dB, G<sub>RX</sub> = \
                    {self.config.rx_gain} dB</p>")

    def updateXScale(self):
        self.pl_widget.setXRange(0, max(self.cell_distances) + 50)

    def updateYScale(self):
        if self.config.path_gain:
            y_min = max(self.cell_pl) * -1 - 20
            y_max = min(self.cell_pl) * -1 + 20
        else:
            y_min = min(self.cell_pl) - 20
            y_max = max(self.cell_pl) + 20
        self.pl_widget.setYRange(y_min, y_max)

    def updateMeasurements(self):
        self.cell_distances = self.cell.get_distances(self.config.tower_lat,
                self.config.tower_lon, self.config.bs_height)
        self.cell_pl = self.cell.get_path_loss(self.config.tx_power, self.config.tx_gain, self.config.rx_gain)
        if self.config.path_gain:
            measured_inverted = [element * -1 for element in self.cell_pl]
            self.pl_measured_line.setData(self.cell_distances, measured_inverted)
            print(min(self.cell_distances), max(self.cell_distances))
        else:
            self.pl_measured_line.setData(self.cell_distances, self.cell_pl)
            print(min(self.cell_distances), max(self.cell_distances))

    def updateLegend(self):
        for item in self.pl_widget.plotItem.childItems():
            if isinstance(item, pg.LegendItem):
                self.pl_widget.plotItem.scene().removeItem(item)

        
        legend = pg.LegendItem(offset=(300,210))
        legend.setBrush("#E3E3E3FF")
        legend.setLabelTextColor("#00000000")
        legend.setLabelTextSize("14pt")

        legend.addItem(self.pl_measured_line, name=f"Measured (tx_power_est = {self.config.tx_power} dBm)")
        legend.addItem(self.pl_fs_line, "Free Space")
        legend.addItem(self.pl_abg_line, name=f"ABG (\u03B1 = {self.config.alpha}, \
                \u03B2 = {self.config.beta} dB, \u03B3 = \
                {self.config.gamma}, d_ref = \
                {self.config.ref_dist} m, \u03C3 = \
                {self.config.sigma} dB, L_coh = {self.config.coherence_length} m)")
        legend.addItem(self.pl_ci_line, name=f"CI (\u03BD = {self.config.pl_exp}, d_ref = \
                {self.config.ref_dist} m, \u03C3 = \
                {self.config.sigma} dB, L_coh = {self.config.coherence_length} m)")
        legend.addItem(self.pl_tworay_line, name=f"TwoRay (bs_height = \
                {self.config.bs_height} m, ue_height = \
                {self.config.ue_height} m)")
        legend.addItem(self.pl_oh_u_line, name=f"OH Urban (bs_height = \
                {self.config.bs_height} m, ue_height = \
                {self.config.ue_height} m, large_city = \
                {self.config.large_city})")
        legend.addItem(self.pl_oh_s_line, name=f"OH Suburban (bs_height = \
                {self.config.bs_height} m, ue_height = \
                {self.config.ue_height} m, large_city = \
                {self.config.large_city})")
        legend.addItem(self.pl_oh_r_line, name=f"OH Rural (bs_height = \
                {self.config.bs_height} m, ue_height = \
                {self.config.ue_height} m, large_city = \
                {self.config.large_city})")

        legend.setParentItem(self.pl_widget.plotItem)

    def updateLines(self):
        if self.config.path_gain:
            self.pl_fs_line.setData(self.x_range, self.engine.fs_pg_array(self.x_range))
            self.pl_tworay_line.setData(self.x_range, self.engine.tworay_pg_array(self.x_range))
            self.pl_ci_line.setData(self.x_range, self.engine.ci_pg_array(self.x_range))
            self.pl_abg_line.setData(self.x_range, self.engine.abg_pg_array(self.x_range))
            self.pl_oh_u_line.setData(self.x_range, self.engine.ohu_pg_array(self.x_range))
            self.pl_oh_s_line.setData(self.x_range, self.engine.ohs_pg_array(self.x_range))
            self.pl_oh_r_line.setData(self.x_range, self.engine.ohr_pg_array(self.x_range))
        else:
            self.pl_fs_line.setData(self.x_range, self.engine.fs_pl_array(self.x_range))
            self.pl_tworay_line.setData(self.x_range, self.engine.tworay_pl_array(self.x_range))
            self.pl_ci_line.setData(self.x_range, self.engine.ci_pl_array(self.x_range))
            self.pl_abg_line.setData(self.x_range, self.engine.abg_pl_array(self.x_range))
            self.pl_oh_u_line.setData(self.x_range, self.engine.ohu_pl_array(self.x_range))
            self.pl_oh_s_line.setData(self.x_range, self.engine.ohs_pl_array(self.x_range))
            self.pl_oh_r_line.setData(self.x_range, self.engine.ohr_pl_array(self.x_range))

def main():
    app = QtWidgets.QApplication(sys.argv)
    w = WSWindow()
    w.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
