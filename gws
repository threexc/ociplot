#!/usr/bin/python3

from PyQt5 import QtWidgets, QtCore, QtGui
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
from pathlib import Path
import sys  # We need sys so that we can pass argv to QApplication
import os
import time
import numpy as np
from random import randint
import walksignal.data as ds
import walksignal.equations as eq
import walksignal.plottools as pt

class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)

        self.setWindowTitle("walksignal 0.0.1")
        self.datafile = None
        self.reference = None
        self.towerset = None
        self.absorption = 0.5
        self.density = 0.5
        self.x_range = None
        self.y_range = None
        self.pl_points = np.arange(0.5, 1500, 0.5)
        self.pl_freq = 50000000
        self.pl_alpha = 1
        self.pl_beta = 1
        self.pl_gamma = 1
        self.pl_sigma = 0
        self.pl_exp = 1
        self.pl_ref_dist = 1
        self.pl_ref_freq = 1000000000
        self.pl_fs_y = None
        self.tower = None
        self.tower_x = None
        self.tower_y = None
        self.cbar = None
        self.map_canvas = pt.MplCanvas(self, width=5, height=4, dpi=100)

        self.x = list(range(100))  # 100 time points
        self.y = [randint(0,100) for _ in range(100)]  # 100 data points
        self.rwm_offset = 0.0

        self.setupUI()

    def setupUI(self):
        self.setupPlotWidgets()
        self.setupLines()
        self.setupFileControls()
        self.setupRWMControls()
        self.setupPathLossControls()
        self.setupTowerControls()
        self.setupFileMenu()
        self.setupMenuBar()
        self.setupPlotTabs()
        self.setupControlTabs()
        self.setupControlsSidebar()
        self.setupDataSidebar()

        self.main_layout = QtWidgets.QHBoxLayout()
        self.main_layout.addWidget(self.dataSidebarWidget, 1)
        self.main_layout.addWidget(self.plot_tabs, 3)
        self.main_layout.addWidget(self.plotSidebarWidget, 1)
        self.model_widget = QtWidgets.QWidget()
        self.model_widget.setLayout(self.main_layout)
        self.setCentralWidget(self.model_widget)

    def setupPlotWidgets(self):
        self.pl_data_pen = pg.mkPen(color=(255, 0, 0))
        self.pl_abg_pen = pg.mkPen(color=(0, 0, 255))
        self.pl_ci_pen = pg.mkPen(color=(64,192,64))

        self.model_widget = pg.PlotWidget()
        self.model_widget.setBackground('w')
        self.model_widget.showGrid(x=True, y=True, alpha=0.5)
        self.model_widget.setYRange(-200, 20)

        self.pl_widget = pg.PlotWidget()
        self.pl_widget.addLegend()
        self.pl_widget.setBackground('w')
        self.pl_widget.showGrid(x=True, y=True, alpha=0.5)
        self.pl_widget.setYRange(-150, 150)

    def setupLines(self):
        self.data_line = self.model_widget.plot(self.x, self.y, pen=self.pl_data_pen)
        self.tower_data_line = pg.ScatterPlotItem(pen=pg.mkPen(width=5, color='b'), symbol='o', size=1)
        self.model_widget.addItem(self.tower_data_line)
        self.styles = {'color':'b', 'font-size':'18px'}
        self.model_widget.setLabel('left', "Power (dBm)", **self.styles)
        self.model_widget.setLabel('bottom', "Distance (m)", **self.styles)

        self.pl_data_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_data_pen, name="Measured")
        self.pl_abg_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_abg_pen, name="ABG Model")
        self.pl_ci_line = self.pl_widget.plot(self.x, self.y, pen=self.pl_ci_pen, name="CI Model")

        self.styles = {'color':'b', 'font-size':'18px'}
        self.pl_widget.setLabel('left', "Path Loss (dB)", **self.styles)
        self.pl_widget.setLabel('bottom', "Distance (m)", **self.styles)

    def setupPlotTabs(self):
        self.plot_tabs = QtWidgets.QTabWidget()
        self.plot_tab1 = self.map_canvas
        self.plot_tab2 = self.pl_widget
        self.plot_tab3 = self.model_widget
        self.plot_tabs.resize(300, 200)
        self.plot_tabs.addTab(self.plot_tab1, "Tower Map")
        self.plot_tabs.addTab(self.plot_tab2, "Path Loss")
        self.plot_tabs.addTab(self.plot_tab3, "RWM")

    def setupControlTabs(self):
        self.control_tabs = QtWidgets.QTabWidget()
        self.rwm_control_tab = QtWidgets.QWidget()
        self.pl_control_tab = QtWidgets.QWidget()
        self.control_tabs.addTab(self.pl_control_tab, "Path Loss")
        self.control_tabs.addTab(self.rwm_control_tab, "RWM")

    def setupPathLossControls(self):
        self.pl_box = QtWidgets.QVBoxLayout()
        self.pl_checkbox_box = QtWidgets.QHBoxLayout()
        self.pl_freq_box = QtWidgets.QHBoxLayout()
        self.pl_alpha_box = QtWidgets.QHBoxLayout()
        self.pl_beta_box = QtWidgets.QHBoxLayout()
        self.pl_gamma_box = QtWidgets.QHBoxLayout()
        self.pl_sigma_box = QtWidgets.QHBoxLayout()
        self.pl_exp_box = QtWidgets.QHBoxLayout()
        self.pl_ref_dist_box = QtWidgets.QHBoxLayout()
        self.pl_ref_freq_box = QtWidgets.QHBoxLayout()
        self.latbox = QtWidgets.QHBoxLayout()
        self.lonbox = QtWidgets.QHBoxLayout()
        self.location_button_box = QtWidgets.QHBoxLayout()

        self.pl_abg_checkbox = QtWidgets.QCheckBox("Plot ABG")
        self.pl_abg_checkbox.setChecked(True)
        self.pl_abg_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_box.addWidget(self.pl_abg_checkbox)
        self.pl_ci_checkbox = QtWidgets.QCheckBox("Plot CI")
        self.pl_ci_checkbox.setChecked(False)
        self.pl_ci_checkbox.stateChanged.connect(self.checkboxUpdate)
        self.pl_checkbox_box.addWidget(self.pl_ci_checkbox)

        self.pl_freq_textbox = QtWidgets.QLineEdit(self)
        self.pl_freq_textbox.setText("50")
        self.pl_freq_textbox_label = QtWidgets.QLabel('Frequency', self)
        self.pl_freq_value_label = QtWidgets.QLabel('MHz', self)
        self.pl_freq_textbox.editingFinished.connect(self.textboxUpdate)
        self.pl_freq_box.addWidget(self.pl_freq_textbox_label)
        self.pl_freq_box.addWidget(self.pl_freq_textbox)
        self.pl_freq_box.addWidget(self.pl_freq_value_label)

        self.pl_ref_dist_textbox = QtWidgets.QLineEdit(self)
        self.pl_ref_dist_textbox.setText("1")
        self.pl_ref_dist_textbox_label = QtWidgets.QLabel('Ref Dist', self)
        self.pl_ref_dist_value_label = QtWidgets.QLabel('m', self)
        self.pl_ref_dist_textbox.editingFinished.connect(self.textboxUpdate)
        self.pl_ref_dist_box.addWidget(self.pl_ref_dist_textbox_label)
        self.pl_ref_dist_box.addWidget(self.pl_ref_dist_textbox)
        self.pl_ref_dist_box.addWidget(self.pl_ref_dist_value_label)

        self.pl_ref_freq_textbox = QtWidgets.QLineEdit(self)
        self.pl_ref_freq_textbox.setText("1000")
        self.pl_ref_freq_textbox_label = QtWidgets.QLabel('Ref Freq', self)
        self.pl_ref_freq_value_label = QtWidgets.QLabel('MHz', self)
        self.pl_ref_freq_textbox.editingFinished.connect(self.textboxUpdate)
        self.pl_ref_freq_box.addWidget(self.pl_ref_freq_textbox_label)
        self.pl_ref_freq_box.addWidget(self.pl_ref_freq_textbox)
        self.pl_ref_freq_box.addWidget(self.pl_ref_freq_value_label)

        self.pl_alpha_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_alpha_slider.setRange(10, 100)
        self.pl_alpha_slider.setValue(10)
        self.pl_alpha_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_alpha_slider_label = QtWidgets.QLabel('Alpha', self)
        self.pl_alpha_value_label = QtWidgets.QLabel('0', self)
        self.pl_alpha_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_alpha_box.addWidget(self.pl_alpha_slider_label)
        self.pl_alpha_box.addWidget(self.pl_alpha_slider)
        self.pl_alpha_box.addWidget(self.pl_alpha_value_label)

        self.pl_beta_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_beta_slider.setRange(-1000, 1000)
        self.pl_beta_slider.setValue(10)
        self.pl_beta_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_beta_slider_label = QtWidgets.QLabel('Beta', self)
        self.pl_beta_value_label = QtWidgets.QLabel('0 dB', self)
        self.pl_beta_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_beta_box.addWidget(self.pl_beta_slider_label)
        self.pl_beta_box.addWidget(self.pl_beta_slider)
        self.pl_beta_box.addWidget(self.pl_beta_value_label)

        self.pl_gamma_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_gamma_slider.setRange(10, 100)
        self.pl_gamma_slider.setValue(10)
        self.pl_gamma_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_gamma_slider_label = QtWidgets.QLabel('Gamma', self)
        self.pl_gamma_value_label = QtWidgets.QLabel('0', self)
        self.pl_gamma_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_gamma_box.addWidget(self.pl_gamma_slider_label)
        self.pl_gamma_box.addWidget(self.pl_gamma_slider)
        self.pl_gamma_box.addWidget(self.pl_gamma_value_label)

        self.pl_sigma_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_sigma_slider.setRange(0, 100)
        self.pl_sigma_slider.setValue(10)
        self.pl_sigma_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_sigma_slider_label = QtWidgets.QLabel('Sigma', self)
        self.pl_sigma_value_label = QtWidgets.QLabel('1 dB', self)
        self.pl_sigma_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_sigma_box.addWidget(self.pl_sigma_slider_label)
        self.pl_sigma_box.addWidget(self.pl_sigma_slider)
        self.pl_sigma_box.addWidget(self.pl_sigma_value_label)

        self.pl_exp_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.pl_exp_slider.setRange(0, 100)
        self.pl_exp_slider.setValue(10)
        self.pl_exp_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.pl_exp_slider_label = QtWidgets.QLabel('PL Exp', self)
        self.pl_exp_value_label = QtWidgets.QLabel('1 dB', self)
        self.pl_exp_slider.valueChanged[int].connect(self.plSliderUpdate)
        self.pl_exp_box.addWidget(self.pl_exp_slider_label)
        self.pl_exp_box.addWidget(self.pl_exp_slider)
        self.pl_exp_box.addWidget(self.pl_exp_value_label)

        self.lat_edit = QtWidgets.QLineEdit(self)
        self.lat_edit.editingFinished.connect(self.textboxUpdate)
        self.latbox_label = QtWidgets.QLabel("Tower Lat", self)
        self.latbox.addWidget(self.latbox_label)
        self.latbox.addWidget(self.lat_edit)
        self.lon_edit = QtWidgets.QLineEdit(self)
        self.lon_edit.editingFinished.connect(self.textboxUpdate)
        self.lonbox_label = QtWidgets.QLabel("Tower Lon", self)
        self.lonbox.addWidget(self.lonbox_label)
        self.lonbox.addWidget(self.lon_edit)

        self.set_latlon_button = QtWidgets.QPushButton("Set Lat/Lon")
        self.set_latlon_button.clicked.connect(self.setCustomTowerLocation)
        self.location_button_box.addWidget(self.set_latlon_button)

        self.pl_box.addLayout(self.pl_checkbox_box)
        self.pl_box.addLayout(self.pl_freq_box)
        self.pl_box.addLayout(self.pl_ref_dist_box)
        self.pl_box.addLayout(self.pl_ref_freq_box)
        self.pl_box.addLayout(self.pl_alpha_box)
        self.pl_box.addLayout(self.pl_beta_box)
        self.pl_box.addLayout(self.pl_gamma_box)
        self.pl_box.addLayout(self.pl_sigma_box)
        self.pl_box.addLayout(self.pl_exp_box)
        self.pl_box.addLayout(self.latbox)
        self.pl_box.addLayout(self.lonbox)
        self.pl_box.addLayout(self.location_button_box)
        self.pl_box.setAlignment(QtCore.Qt.AlignTop)

    def setupRWMControls(self):
        self.model_box = QtWidgets.QVBoxLayout()
        self.density_box = QtWidgets.QHBoxLayout()
        self.absorption_box = QtWidgets.QHBoxLayout()
        self.offset_box = QtWidgets.QHBoxLayout()

        self.density_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.density_slider.setRange(1, 100)
        self.density_slider.setValue(50)
        self.density_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.density_slider_label = QtWidgets.QLabel('Density', self)
        self.density_value_label = QtWidgets.QLabel('0.5', self)

        self.absorption_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.absorption_slider.setRange(1, 100)
        self.absorption_slider.setValue(50)
        self.absorption_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.absorption_slider_label = QtWidgets.QLabel('Absorption', self)
        self.absorption_value_label = QtWidgets.QLabel('0.5', self)

        self.offset_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.offset_slider.setRange(-150, 150)
        self.offset_slider.setValue(0)
        self.offset_slider.setFocusPolicy(QtCore.Qt.NoFocus)
        self.offset_slider_label = QtWidgets.QLabel('Offset', self)
        self.offset_value_label = QtWidgets.QLabel('0 dB', self)

        self.density_slider.valueChanged[int].connect(self.rwmSliderUpdate)
        self.absorption_slider.valueChanged[int].connect(self.rwmSliderUpdate)
        self.offset_slider.valueChanged[int].connect(self.rwmSliderUpdate)

        self.density_box.addWidget(self.density_slider_label)
        self.density_box.addWidget(self.density_slider)
        self.density_box.addWidget(self.density_value_label)
        self.absorption_box.addWidget(self.absorption_slider_label)
        self.absorption_box.addWidget(self.absorption_slider)
        self.absorption_box.addWidget(self.absorption_value_label)
        self.offset_box.addWidget(self.offset_slider_label)
        self.offset_box.addWidget(self.offset_slider)
        self.offset_box.addWidget(self.offset_value_label)

        self.radio_2d = QtWidgets.QRadioButton("2D Model", self)
        self.radio_3d = QtWidgets.QRadioButton("3D Model", self)
        self.radio_3d.setChecked(True)
        self.radio_2d.toggled.connect(self.updateRWMPlot)
        self.radio_3d.toggled.connect(self.updateRWMPlot)

        self.model_box.addWidget(self.radio_2d)
        self.model_box.addWidget(self.radio_3d)
        self.model_box.addLayout(self.density_box)
        self.model_box.addLayout(self.absorption_box)
        self.model_box.addLayout(self.offset_box)
        self.model_box.setAlignment(QtCore.Qt.AlignTop)

    def setupFileControls(self):
        self.file_control_box = QtWidgets.QVBoxLayout()
        self.load_box = QtWidgets.QVBoxLayout()
        self.set_data_box = QtWidgets.QVBoxLayout()
        self.set_reference_box = QtWidgets.QVBoxLayout()

        self.file_controls_title = QtWidgets.QLabel('File Selection', self)
        self.file_controls_title.setFont(QtGui.QFont('Arial', 14))

        self.load_button = QtWidgets.QPushButton('Load', self)
        self.load_button.clicked.connect(self.setDataSource)

        self.set_data_button = QtWidgets.QPushButton('Set Dataset', self)
        self.set_data_button.clicked.connect(self.showFileDialog)

        self.set_data_text = QtWidgets.QLineEdit('None', self)
        self.set_data_text.setReadOnly(True)

        self.set_reference_button = QtWidgets.QPushButton('Set Reference', self)
        self.set_reference_button.clicked.connect(self.showReferenceDialog)

        self.set_reference_text = QtWidgets.QLineEdit('None', self)
        self.set_reference_text.setReadOnly(True)

        self.load_box.addWidget(self.load_button)
        self.set_data_box.addWidget(self.set_data_button)
        self.set_data_box.addWidget(self.set_data_text)

        self.set_reference_box.addWidget(self.set_reference_button)
        self.set_reference_box.addWidget(self.set_reference_text)

        self.file_control_box.addWidget(self.file_controls_title)
        self.file_control_box.addLayout(self.load_box)
        self.file_control_box.addLayout(self.set_data_box)
        self.file_control_box.addLayout(self.set_reference_box)
        
    def setupTowerControls(self):
        self.tower_box = QtWidgets.QVBoxLayout()
        self.cellid_box = QtWidgets.QHBoxLayout()
        self.mcc_box = QtWidgets.QHBoxLayout()
        self.mnc_box = QtWidgets.QHBoxLayout()
        self.lac_box = QtWidgets.QHBoxLayout()

        self.tower_combo_title = QtWidgets.QLabel('Tower Selection', self)
        self.tower_combo_title.setFont(QtGui.QFont('Arial', 14))

        self.cellid_label = QtWidgets.QLabel('Cell IDs', self)
        self.mcc_label = QtWidgets.QLabel('MCCs', self)
        self.mnc_label = QtWidgets.QLabel('MNCs', self)
        self.lac_label = QtWidgets.QLabel('LACs', self)

        self.cellid_count = QtWidgets.QLabel('', self)
        self.mcc_count = QtWidgets.QLabel('', self)
        self.mnc_count = QtWidgets.QLabel('', self)
        self.lac_count = QtWidgets.QLabel('', self)

        self.cellid_combo = QtWidgets.QComboBox(self)
        self.mcc_combo = QtWidgets.QComboBox(self)
        self.mnc_combo = QtWidgets.QComboBox(self)
        self.lac_combo = QtWidgets.QComboBox(self)

        self.cellid_combo.activated.connect(self.setTower)

        self.cellid_box.addWidget(self.cellid_label)
        self.cellid_box.addWidget(self.cellid_count)
        self.cellid_box.addWidget(self.cellid_combo)
        self.mcc_box.addWidget(self.mcc_label)
        self.mcc_box.addWidget(self.mcc_count)
        self.mcc_box.addWidget(self.mcc_combo)
        self.mnc_box.addWidget(self.mnc_label)
        self.mnc_box.addWidget(self.mnc_count)
        self.mnc_box.addWidget(self.mnc_combo)
        self.lac_box.addWidget(self.lac_label)
        self.lac_box.addWidget(self.lac_count)
        self.lac_box.addWidget(self.lac_combo)
        self.tower_load_button = QtWidgets.QPushButton('Load Tower Data', self)
        self.tower_load_button.clicked.connect(self.loadTower)
        self.tower_load_button.setEnabled(False)
        
        self.tower_box.addWidget(self.tower_combo_title)
        self.tower_box.addLayout(self.cellid_box)
        self.tower_box.addLayout(self.mcc_box)
        self.tower_box.addLayout(self.mnc_box)
        self.tower_box.addLayout(self.lac_box)
        self.tower_box.addWidget(self.tower_load_button)
        self.tower_box.setAlignment(QtCore.Qt.AlignTop)
        print("Set up tower controls")

    def setupFileMenu(self):
        self.selectFile = QtWidgets.QAction(QtGui.QIcon('open.png'), 'Select File', self)
        self.selectFile.setShortcut('Ctrl+O')
        self.selectFile.setStatusTip('Select New File')
        self.selectFile.triggered.connect(self.showFileDialog)
        self.selectFile.triggered.connect(self.setDataSource)

        self.referenceFile = QtWidgets.QAction(QtGui.QIcon('open.png'), 'Select Reference File', self)
        self.referenceFile.setShortcut('Ctrl+R')
        self.referenceFile.setStatusTip('Select Reference File')
        self.referenceFile.triggered.connect(self.showReferenceDialog)
        print("Set up file menu buttons")

    def setupMenuBar(self):
        self.menubar = self.menuBar()
        self.fileMenu = self.menubar.addMenu('&File')
        self.fileMenu.addAction(self.selectFile)
        self.fileMenu.addAction(self.referenceFile)
        print("Set up menu bar")

    def setupControlsSidebar(self):
        self.plotSidebar = QtWidgets.QVBoxLayout()
        self.rwm_control_tab.setLayout(self.model_box)
        self.pl_control_tab.setLayout(self.pl_box)

        self.controls_title = QtWidgets.QLabel('Controls', self)
        self.controls_title.setFont(QtGui.QFont('Arial', 14))

        self.plotSidebar.addWidget(self.controls_title)
        self.plotSidebar.addWidget(self.control_tabs)
        self.plotSidebar.setAlignment(QtCore.Qt.AlignTop)
        self.plotSidebarWidget = QtWidgets.QWidget()
        self.plotSidebarWidget.setLayout(self.plotSidebar)
        print("Set up sidebar")

    def setupDataSidebar(self):
        self.dataSidebar = QtWidgets.QVBoxLayout()
        self.dataSidebar.addLayout(self.file_control_box)
        self.dataSidebar.addLayout(self.tower_box)
        self.dataSidebar.addWidget(self.tower_load_button)
        self.dataSidebar.setAlignment(QtCore.Qt.AlignTop)
        self.dataSidebarWidget = QtWidgets.QWidget()
        self.dataSidebarWidget.setLayout(self.dataSidebar)
        print("Set up sidebar")

    def showFileDialog(self):
        home_dir = str(Path.home)
        fname = QtWidgets.QFileDialog.getOpenFileNames(self, 'Open file', home_dir)

        if fname[0]:
            print("Selected datafile {0}".format(fname[0]))
            self.datafile = fname[0]
            self.set_data_text.setText(str(self.datafile))

    def showReferenceDialog(self):
        home_dir = str(Path.home)
        fname = QtWidgets.QFileDialog.getOpenFileName(self, 'Open file', home_dir)

        if fname[0]:
            print("Selected reference file {0}".format(fname[0]))
            self.reference = fname[0]
            self.set_reference_text.setText(str(self.reference))

    def setDataSource(self):
        if self.reference and self.datafile:
            self.loadDataSet()
        elif self.reference:
            print("datafile not selected")
        elif self.datafile:
            print("reference file not selected")
        else:
            print("No files selected. Select a datafile and a reference file")

    def loadDataSet(self):
        print("Loading data...")
        self.start_time = time.time()
        self.towerset = ds.DataSet(self.datafile, self.reference)
        self.duration = time.time() - self.start_time
        print("Done loading data in {:.2f} seconds".format(self.duration))
        print("Setting up tower selectors...")
        self.cellid_combo.clear()
        self.mcc_combo.clear()
        self.mnc_combo.clear()
        self.lac_combo.clear()
        self.cellid_count.setText("(" + str(len(self.towerset.cellid_u)) + ")")
        self.mcc_count.setText("(" + str(len(self.towerset.mcc_u)) + ")")
        self.mnc_count.setText("(" + str(len(self.towerset.mnc_u)) + ")")
        self.lac_count.setText("(" + str(len(self.towerset.lac_u)) + ")")

        for mcc in self.towerset.mcc:
            self.mcc_combo.addItem(str(mcc))
        for mnc in self.towerset.mnc_u:
            self.mnc_combo.addItem(str(mnc))
        for lac in self.towerset.lac_u:
            self.lac_combo.addItem(str(lac))
        for cellid in self.towerset.cellid_u:
            self.cellid_combo.addItem(str(cellid))

        print("Generating default plot...")
        self.loadTower()
        print("Done.")

    def setTower(self):
        print(self.mcc_combo.currentText(),
                self.mnc_combo.currentText(),
                self.lac_combo.currentText(),
                self.cellid_combo.currentText())
        self.tower = self.towerset.get_tower_stats(self.mcc_combo.currentText(), self.mnc_combo.currentText(), self.lac_combo.currentText(), self.cellid_combo.currentText())

        if self.tower is None:
            self.tower_load_button.setText("No Valid Reference")
            self.tower_load_button.setEnabled(False)
        else:
            point_count = len(self.tower.signal_power)
            self.tower_load_button.setText("Load Tower Data ({0} points)".format(point_count))
            self.tower_load_button.setEnabled(True)

    def setCustomTowerLocation(self):
        if self.lat_edit.text() and self.lon_edit.text():
            self.tower.lat = float(self.lat_edit.text())
            self.tower.lon = float(self.lon_edit.text())

            self.tower.get_distances()
            self.tower.get_path_loss()

        self.loadTower()

    def textboxUpdate(self):
        self.pl_freq = float(self.pl_freq_textbox.text())
        self.pl_ref_dist = float(self.pl_ref_dist_textbox.text())
        self.pl_ref_freq = float(self.pl_ref_freq_textbox.text())
        if self.towerset:
            self.updatePathLossPlot()
    
    def checkboxUpdate(self):
        self.updatePathLossPlot()

    def rwmSliderUpdate(self):
        self.density = self.density_slider.value() / 100.0
        self.absorption = self.absorption_slider.value() / 100.0
        self.rwm_offset = self.offset_slider.value()
        self.density_value_label.setText(str(self.density))
        self.absorption_value_label.setText(str(self.absorption))
        self.offset_value_label.setText(str(self.rwm_offset) + " dB")
        if self.towerset:
            self.updateRWMPlot()

    def plSliderUpdate(self):
        self.pl_alpha = self.pl_alpha_slider.value() / 10.0
        self.pl_beta = self.pl_beta_slider.value() / 10.0
        self.pl_gamma = self.pl_gamma_slider.value() / 10.0
        self.pl_sigma = self.pl_sigma_slider.value() / 10.0
        self.pl_exp = self.pl_exp_slider.value() / 10.0
        self.pl_alpha_value_label.setText(str(self.pl_alpha))
        self.pl_beta_value_label.setText(str(self.pl_beta) + " dB")
        self.pl_gamma_value_label.setText(str(self.pl_gamma))
        self.pl_sigma_value_label.setText(str(self.pl_sigma) + " dB")
        self.pl_exp_value_label.setText(str(self.pl_exp))
        if self.towerset:
            self.updatePathLossPlot()

    def loadTower(self):
        print("Loading tower data...")
        self.setTower()
        self.updateTowerPlot()
        self.updateRWMPlot()
        self.updatePathLossPlot()
        self.setBoxText()
        print("Loaded data for {0} {1} {2} {3}".format(self.tower.mcc, self.tower.mnc, self.tower.lac, self.tower.cellid))

    def setBoxText(self):
        if self.tower:
            self.lat_edit.setText(str(self.tower.lat))
            self.lon_edit.setText(str(self.tower.lon))
        else:
            self.lat_edit.setText("N/A")
            self.lon_edit.setText("N/A")

    def updateTowerPlot(self):
        points = self.tower.data_points
        lon_series = np.array([point.lon for point in points], dtype=float)
        lat_series = np.array([point.lat for point in points], dtype=float)

        if self.cbar:
            self.cbar.remove()
        self.map_canvas.axes.cla()
        divider = make_axes_locatable(self.map_canvas.axes)
        cax = divider.append_axes("right", size="5%", pad=0.1)
        self.map_canvas.axes.imshow(self.towerset.plot_map, zorder=0, extent = self.towerset.map_bbox[0], aspect="equal")
        powerscatter = self.map_canvas.axes.scatter(lon_series, lat_series, zorder=1, alpha=1.0, s=20, c=self.tower.signal_power, cmap=self.towerset.cm)

        if (self.tower.lon is None) or (self.tower.lat is None):
            print("Can't draw tower, bad lat/lon")
        else:
            self.map_canvas.axes.scatter(float(self.tower.lon), float(self.tower.lat), zorder=1, alpha=1.0, s=20, color="blue")

        self.map_canvas.axes.set_xlim(self.towerset.map_bbox[0][0], self.towerset.map_bbox[0][1])
        self.map_canvas.axes.set_ylim(self.towerset.map_bbox[0][2], self.towerset.map_bbox[0][3])
        self.map_canvas.axes.set_xlabel("Longitude")
        self.map_canvas.axes.set_ylabel("Latitude")
        self.map_canvas.axes.set_title("Signal Power vs Position")
        self.cbar = self.map_canvas.fig.colorbar(powerscatter, cax=cax)
        self.cbar.ax.set_ylabel("Signal Power (dBm)", rotation=270, labelpad=10)

        self.map_canvas.draw()

    def updatePathLossPlot(self):
        self.pl_data_line.clear()
        self.pl_data_line.setData(self.tower.distances, self.tower.path_loss)
        self.updateCILine()
        self.updateABGLine()

    def updateCILine(self):
        if self.pl_ci_checkbox.isChecked():
            self.ci_y = eq.v_pl_ci(self.pl_points, self.pl_freq, self.pl_sigma, self.pl_exp, self.pl_ref_dist)
            self.pl_ci_line.setData(self.pl_points, self.ci_y)
        else:
            self.pl_ci_line.clear()

    def updateABGLine(self):
        if self.pl_abg_checkbox.isChecked():
            self.abg_y = eq.v_pl_abg(self.pl_points, self.pl_freq, self.pl_alpha, self.pl_beta, self.pl_gamma, self.pl_sigma, self.pl_ref_dist, self.pl_ref_freq)
            self.pl_abg_line.setData(self.pl_points, self.abg_y)
        else:
            self.pl_abg_line.clear()

    def updateRWMPlot(self):
        self.x_range = self.towerset.plotrange
        if self.radio_2d.isChecked():
            self.y_range = self.rwm_offset + eq.gplt_rwm_fpd2d(self.density, self.absorption, self.x_range)
        else:
            self.y_range = self.rwm_offset + eq.gplt_rwm_fpd3d(self.density, self.absorption, self.x_range)
        self.data_line.clear()
        self.data_line.setData(self.x_range, self.y_range)
        if self.tower and self.tower.distances:
            self.tower_data_line.clear()
            self.tower_data_line.setData(self.tower.distances, self.tower.signal_power, symbol='o')

app = QtWidgets.QApplication(sys.argv)
w = MainWindow()
w.show()
sys.exit(app.exec_())
